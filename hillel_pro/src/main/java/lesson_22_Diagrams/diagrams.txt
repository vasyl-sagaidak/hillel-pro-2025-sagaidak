Урок 22 (Четверг - 17.03.2025)
Тема: DIAGRAMS
======================================================================================================
Ключевые разделы:

1) МОДЕЛЬ. КОНЦЕПТУАЛЬНЫЕ МОДЕЛИ.
2) КОНЦЕПЦИЯ UML.
3) ОБЬЕКТНО-ОРИЕНТИРОВАННЫЙ АНАЛИЗ И ПРОЕКТИРОВАНИЕ.
4) СТРОИТЕЛЬНЫЕ БЛОКИ UML.
5) USE CASE ДИАГРАММЫ.
6) SEQUENCE ДИАГРАММЫ.
7) ДИАГРАММЫ КЛАССОВ.
8) ДОПОЛНИТЕЛЬНЫЕ МАТЕРИАЛЫ

======================================================================================================
1) МОДЕЛЬ. КОНЦЕПТУАЛЬНЫЕ МОДЕЛИ.

В программировании и разработке ПО термин "Model" используется для описания обьектов, явлений либо про-
цессов реального мира, которые мы моделируем в программном коде для дальнейшей обработки. Модель может
быть использована для анализа, визуализации, прогнозирования либо взаимодействия с обьектами в программе.

Существует ряд концептуальных моделей которые помогают понять внутреннее устройство и логику программы:

1. Domain Model
    Это "модель предметной области". Включает в себя абстрактное отображение обьектов, концепций и взаи-
    мосвязей в предметной области программы. Используется для описания бизнес правил и логики домена.
    Может быть реализована в виде классов, интерфейсов, их отношения и поведения.

2. Conceptual Data Model
    Это "концептуальная модель базы данных". Отображает структуру данных и их взаимосвязи в базе. Исполь-
    зуется для описания сущностей, атрибутов и связей между ними. Может быть представлена в виде ER-диаг-
    раммы (сущностно-связевой диаграммы).

3. Software Architecture Model
    Это "модель архитектуры программного обеспечения". Отображает структуру, компоненты и взаимосвязи
    программной системы. Используется для описания архитектуры программы и ее составных частей. Может
    быть представлена в виде диаграмм архитектуры.

4. Process Model
    Это "модель последовательности хода программы". Отображает последовательность действий либо операций
    в программе. Используется для описания и взаимосвязей процессов и выполнения программы. Может быть
    представлена в виде диаграммы потока данных или даиграммы потока процесса.

5. Interaction Model
    Это "модель взаимодействия пользователя с системой". Отображает взаимодействие пользователя с програ-
    ммой либо взаимодействия компонентов системы. Используется для описания сценария взаимодействия и пото-
    ков работы. Может быть представлена в виде диаграмм взаимодействия либо сценариев использования.

6. Behavior Model
    Это "модель поведения системы в зависимости от входных данных и состояния". Используется для описания
    реакций системы на внешние события либо изменения внутреннего состояния. Может быть представлена в
    виде диаграмм состояний либо диаграмм активности. Модель поведения описывает способы того, как система
    взаимодействует со своим окружением и реагирует на изменения. Одним из подходов моделировани является
    использование диаграмм состояний (State Diagrams).

*
======================================================================================================
2) КОНЦЕПЦИЯ UML.

UML (Unified Model Language) - условный унифицированный язык моделирования который является стандартом
когда дело доходит до визуализации, спецификации, построения и документирования программных систем.
Язык UML предоставляет набор графических средств для создания моделей, которые описывают структуру и
поведение системы.

UML включает в себя следующее:

1. Диаграммы
    UML имеет в своем арсенале различные виды диаграмм, которые используются для моделирования различ-
    ных аспектов системы. К основным диаграммам UML относятся диаграммы классов, диаграммы взаимодей-
    ствия, диаграммы деятельности, диаграммы последовательности итп.

2. Элементы
    UML содержит набор стандартных элементов для можелирования различных аспектов системы, таких как
    классы, обьекты, интерфейсы, наследования, ассоциации, композиции, итп.

3. Отношения
    В UML определены различные типы взаимоотношений между элементами модели, такие как ассоциация,
    агрегация, композиция, наследование, реализация, зависимость, итп.

4. Диаграммы состояний
    Для моделирования состояний обьектов либо системы в UML используется диаграмма состояний.

5. Пакеты
    В UML существуют понятия пакетов для организации и структурирования модели.

6. Профили
    UML предоставляет возможность определения собственных нотаций и элементов для конкретного
    дополнительного контекста с помощью профилей.

Пример UML-диаграммы может включать диаграмму классов для моделирования структуры классов программной
системы, диаграмму взаимодействия для показа взаимдействий между обьектами во время выполнения, диаг-
рамму последовательности для показа последовательности выполнения операций, итп.

UML-диаграммы разделяются на 14 типов:

                                     _____________________
                                     | ТИПЫ UML ДИАГРАММ |
                                     ---------------------
                                               |
                        -------------------------------------------------
                        |                                               |
              -------------------------                     ---------------------------
              | СТРУКТУРНЫЕ ДИАГРАММЫ |                     | ПОВЕДЕНЧЕСКИЕ ДИАГРАММЫ |
            / -------------------------                     --------------------------- \
-----------------------------------                             ----------------------------------
| Диаграмма композитной структуры |                             |  Диаграмма состояний автомата  |
-----------------------------------                             ----------------------------------
|     Диаграмма развертывания     |                             |     Диаграмма коммуникации     |
-----------------------------------                             ----------------------------------
|        Диаграмма пакетов        |                             |     Диаграмма прецендентов     |
-----------------------------------                             ----------------------------------
|       Диаграмма профилей        |                             |     Диаграмма деятельности     |
|                                 |                             |        (Activity Diagram)      |
-----------------------------------                             ----------------------------------
|        Диаграмма классов        |                             |  Диаграмма последовательности  |
|         (Class Diagram)         |                             |       (Sequence Diagram)       |
-----------------------------------                             ----------------------------------
|        Диаграмма обьектов       |                             |       Диаграмма времени        |
-----------------------------------                             ----------------------------------
|      Диаграмма компонентов      |                             |    Диаграмма взаимодействия    |
-----------------------------------                             ----------------------------------

Приложение онлайн для создания диаграмм (включить UML 2.5 и SysML): draw.io

*
======================================================================================================
3) ОБЬЕКТНО-ОРИЕНТИРОВАННЫЙ АНАЛИЗ И ПРОЕКТИРОВАНИЕ.

Обьектно-ориантированный анализ и проектирование (ООА и ООП) включает в себя использование диаграмм для
моделирования различных аспектов програмного обеспечения.

Основные типы диаграмм которые используются в ООА и ООП:

1. Диаграммы вариантов использования (Use Case Diagrams): Используются для описания функциональности
   системы с точки зрения пользователя. В данных диаграммах показываются варианты использования системы
   и взаимодействие пользователя с ней.

2. Диаграммы классов (Class Diagrams): Используются для моделирования структуры системы путем определения
   классов, их атрибутов и методов, а так же взаимосвязей между классами.

3. Диаграммы последовательностей(Sequence Diagrams): Используются для показа последовательности взаимодей-
   ствия между обьектами системы в разных сценариях выполнения.

4. Диаграммы активности(Activity Diagrams): Используются для моделирования процессов либо бизнес-процессов
   , показывая последовательность действий и решений.

5. Диаграммы сотояний(State Diagrams): Используются для моделирования поведения обьектов системы в разных
   состояниях и переходов между ними.

6. Диаграммы компонентов(Component Diagrams): Используются для моделирования компонентной структуры систе-
   мы и зависимостей между компонентами.

7. Диаграммы развертывания(Deployment Diagrams): Используются для моделирования физического развертывания
   компонентов системы на аппаратном обеспечении (серверах, системах, итп).

Данные диаграммы помогают разработчикам и аналитикам понимать, моделировать и анализировать разные аспекты
системы во время работы над проектом. Каждый тип диаграммы имеет свои особенности и использование, и они
довольно часто используются вместе для полного описания системы.

*
======================================================================================================
4) СТРОИТЕЛЬНЫЕ БЛОКИ UML.

Строительные блоки UML - это ключевые элементы, из которых состоят диаграммы в рамках условного языка
моделирования. Некоторые из наиболее распространенных блоков:

1. Класс - Представляет с собой сущность с атрибутами и методами, которые описывают структуру и пове-
           дение обьекта в системе.

2. Обьект - Представляет отдельный экземпляр класса в процессе выполнения программы.

3. Интерфейс - Определяет набор методов, которые класс обязан реализовать, но не предоставляет конкре-
               тную реализацию.

4. Пакет - Группирует классы, интерфейсы и другие строительные блоки для организации и управления слож-
           ностью модели.

5. Отношения - Показывают связи между разными элементами модели. Например, ассоциация, агрегация, компо-
               зиция, наследование, реализация, итп.

6. Атрибут - Описывает свойства класса, такие как имя, тип данных, ограничения, итп.

7. Метод - Определяет поведение класса, описывая, какие операции могут быть выполнены с этим классом.

8. Диаграмма - Визуализирует структуру либо поведение системы с использованием различных строительных
               блоков и их взаимосвязей.

9. Статус - Показывает текущее состояние обьекта в контексте выполнения определенной деятельности.

10. Ссылка - Показывает связь между обьектами в системе.

Эти строительные блоки позволяют разработчикам создавать диаграммы, которые ясно и точно отображают
разные аспекты программной системы и способствуют взаимопониманию и диалогу между участниками проекта.

*
======================================================================================================
5) USE CASE ДИАГРАММЫ.

Use Case диаграмма - (диаграмма вариантов использования, диаграмма прецендентов, сценарий использо-
вания) - позволяет представить типы ролей и их взаимодействие с системой. При этом не показывает поря-
док выполнения шагов. Изображает функциональные требования ( то, что система может сделать) с точки
зрения пользователя. Может описываться текстом либо в виде диаграмы.

Use Case диаграммы разрабатываются на ранних этапах проектирования системы и предназначены для:
- Простого обьяснения работы системы, создания и согласования ТЗ.
- Формирования функциональных (что должна делать) требований к системе.
- Создание основы для документации и тестирования.

Составляющие Use Case диаграммы: Диаграммы вариантов использования (Use Case) составляются из 4 обьектов:
актор (человечек), прецендент (вариант использования) - (овал), система (квадрат), связь (пунктирная линия
со стрелкой на конце).

АКТОР:
    Понятие кого-то, или чего-то, что взаимодействует с системой, но не принадлежит ей (находится вне
    ее пределов). Обычно обозначается в в виде стилизованного человечка. Реже в виде прямоугольника
    класса с надписью <<actor>>.

Всех акторов условно можно разделить на первичніх (тех, что инициализируют взаимоействие с системой)
и вторичных (тех, кто реагирует на взаимодействие). Первичные обычно изображаются слева, а вторичные
справа от системы.

Поскольку любая система может взаимодействовать не только с людьми, актор не всегда обозначает поль-
зователя-человека. Он может обозначать другую систему либо устройство с которым взаимодействует система.

Часто возникает путаница между понятиями актор и пользователь:
актор - это понятие, которое представляет класс пользователей (обобщение группы пользователей), а не
        конкретного пользователя, и может обьеденять в себе несколько ролей. Например актор - работ-
        ник компании может иметь роли: инженер, менеджер, директор;

пользователь - это тип актора либо его конкретная реализация. Несколько пользователей могут играть
               одну роль, тоесть быть одним актором. Например Иван и Роман - студенты. Так-же один
               пользователь может пренадлежать раличным акторам, тоесть выполнять различные роли.
               Например, в системе университета актор может быть преподавателем в одном случае, и
               научным руководителем в другом.

СЛУЧАЙ ИСПОЛЬЗОВАНИЯ (ПРЕЦЕДЕНТ): Прецеденты определяют ожидаемое поведение и отвечают на вопросы
о том, что делает система. Представляют набор возможных функций, действий или заданий. Изображаются в
виде элипса с названием действия (глаголом) в нем. Прецедент указывает, что должно случиться, но при
этом не отвечает на вопрос "Как это должно случиться?".

К примеру: в системе банковского приложения прецедентами могут быть: проверить баланс, перевести сред-
ства, оплатить счет и др.

СИСТЕМА: То, что моделируется. Это может быть сайт, мобильное приложение или даже модуль программного
обеспечения. Изображается в виде прямоугольника с названием системы в верхней части.

КОММЕНТАРИЙ: расширяет функциональность, предоставляет подсказки и условия.

*
======================================================================================================
6) SEQUENCE ДИАГРАММЫ.

Диаграмма последовательности (Sequence Diagram) - показывает временные особенности передачи и приема
сообщений обьектам. Упорядоченность по времени следует понимать как последовательность действий и не
путать с временными диаграмами.

Обозначение диаграммы последовательности:
Линия жизни начинается с объекта прямоугольника (голова) и изображается вертикальной пунктирной линией
(стеблем). Она служит для обозначения периода времени, в течение которого объект существует в системе.
Если объект существует в системе постоянно, его линия жизни должна продолжаться по всей плоскости
диаграммы сверху вниз. Обычно объекты перечисляются слева направо.
Шаблоны линии жизни в Draw.io находятся в наборе фигур UML 2.5.

Обьект (участник) - обозначения линии жизни и экземпляр класса у горизонтального прямоугольника.

Актор - используется, когда конкретная диаграмма последовательности принадлежит варианту использования.

Сущность (Entity) - представляет системные данные. Например, в программе обслуживания клиентов субьект-
клиент управляет данными (сущность), связанными с клиентом.

Граница (boundary) - указывает на границу системы/граничный элемент в системе; например, экраны интер-
фейса пользователя, шлюзы баз данных либо меню, с которыми взаимодействуют пользователи.

Управление (control) - указывает на управляющую сущность или менеджера. Он организовывает и планирует
взаимодействие между границами и сущностями, и служит посредником между ними.

1. Полоса активации (фокус управления) - тонкий прямоугольник на линии жизни, в течении которого эле-
мент выполняет операцию. Длинна прямоугольника указывает на продолжительность пребывани обьектов в
активном режиме.

2. Сообщения (вызовы) появляются в последовательном порядке на линии жизни. Сообщение изображается при
помощи стрелок. Начало стрелки всегда касается линии жизни отправителя и линии жизни обьекта, который
принимает сообщение. Подпись может находиться над или внутри стрелки сообщения. Для удобства перед со-
обшением можно проставлять нумерацию действий. Сообщение можно разделить на следуюшие категории.

Сообщения разделяются на синхронные, которые ожидают ответа (закрашенный указатель), и асинхронные -
не ожидают ответа (пунктирная линия, обычный указатель).

Рекурсивное сообщение - направленное к себе (начинается и заканчивается на одной линии жизни).
Примером может служить получения доступа к камере смартфона.

Сообщение возвращения (пунктирная линия с закрашенным указателем) - обратное сообщение вызывающей стороне.
Можно избежать загромождения диаграмм, указывая значения в самой стрелке начального сообшения.

Создание участника - сообщение что создает новую линию жизни. Обозначается пункирной линией, направленной
к прямоугольнику участника. Если созданный участник делает что-то после его создания, следует добавить
окно активации под его полем.

Удаление участника - обозначается крестом вконце линии жизни участника. При этом, если стрелка сообщения
направлена от одного учасника к другому, это значит, что один участник удаляет другого. Если стрелка
отсутствует , участник самоничтожается.

Найденное сообщение - сообщение от неизвестного источника.
1. Другие обозначения:
- Комментарий - прямоугольник с загнутым углом. Может быть обьединен с обьектом пунктирной линией.
- Фрагмент используется, если процесы создают цикл или требуют выполнения условий для его окончания.
  Он состоит из окна(рамки) и оператора фрагмента(надписи) в пятиугольнике свеху слева.

 Фрагмент диаграммы последовательности (sd) используется для окружения всей диаграмі. После написания
 sd указывается название диаграммы.

 Альтернативный фрагмент (alt) – показывает один или несколько альтернативных сценариев, где выполняется
 только один, тот, чье условие истинно.

 Для описания двух или более альтернативных сценариев используются пунктирные линии – операнд взаимодей-
 ствия (interaction operands). Каждый операнд имеет условие защиты в квадратных скобках (guard condition).

 Опциональный (не обязательный) фрагмент (opt) – выполняется, только если указанное условие, истинно.
 Он имеет только одно условие и не делится на операнды. Используется для описания необязательного шага
 рабочего процесса.

Фрагмент цикла (loop) — используется для повторяющейся последовательности. Может иметь пределы итерации,
которые пишутся у названия loop.

Фрагмент ссылки (ref) – для повторного использования части последовательности в другом месте диаграммы.

РЕКОМЕНДАЦИИ ПО СОЗДАНИЮ ДИАГРАММ ПОСЛЕДОВАТЕЛЬНОСТИ:
- Выберите тему для диаграммы последовательности;
- Определите обьекты либо акторов, которые будут участвовать в создании диаграммы.
- Создайте короткий список взаимодействий обьектов, которые будут отображаться на диаграмме последова-
  тельности.
- Определите, какими типами сообщений будут обмениваться обьекты.
- Вы можете раскрасить диаграмму.

РАСПРОСТРАНЕННЫЕ ОШИБКИ:
- Не добавляйте большого количества деталей. Это захламляет диаграмму и усложняет ее чтение.
- Начало стрелки сообщения должен всегда касаться линии жизни отправителя, а указатель - линии жизни
  обьекта-получателя.
- Сообщения должны строиться слева направо.
- Не используйте диаграмму последовательности, если необходима реализация простой логики.

*
======================================================================================================
7) ДИАГРАММЫ КЛАССОВ.

Диаграмма классов UML это визуальная нотация, которая используется для построения визуализации обьектно-
ориентированных систем. Диаграмма классов в унифицированном языке моделирования - это статичная стру-
ктурная диаграмма, которая демонстрирует свойства системы, классы, операции и связи между обьектами для
описания структуры системы. Вы можете определенным образом моделировать системы с помощью Унифицирован-
ного языка моделирования (UML). Одним из известнейших видов UML является диаграмма классов. Он использу-
ется среди инженеров программного обеспечения для документирования архитектуры программного обеспечения.
Диаграммы классов являются формой структурных диаграмм, поскольку они определяют, что должно быть вклю-
чено к моделированной системе.

Независимо от того, насколько вы имеете опыт работы с диаграммами классов либо UML, наше программное
обеспечение UML создано для простоты использования. Так же была разработана стандартизованная модель
UML для обьяснения метода ООП. Диаграммы класов являются основой UML, поскольку каждый класс является
строительным блоком обьектов. Много элементов диаграммы классов могут представлять фактические классы,
которые будут запрограммированы, первичные обьекты либо связи между классами и обьектами.

Компоненты диаграммы классов UML:

Верхняя секция: Содержит название класса. Независимо от того, обговариваете вы классификатор или обьект,
этот раздел всегда необходим.

Средняя секция: Содержит атрибуты класса. Описывает характеристики класса в этом разделе. Это требуется
только при описании конкретного экземпляра класса.

Нижний раздел: Содержит методы класса. Показывает как данные взаимодействуют с классом.

Модификаторы доступа участников:

private (-)
public (+)
protected(#)
package-private (~)
static (подчеркнутый)
Производный (/)

Пособие по построению системных объектов и реализации поведения. Класс в UML описывает отдельный элемент
или группу объектов с похожим поведением и структурой. Прямоугольник изображает их со строчками для имен
класса, характеристик и операций.

Когда использовать диаграмму классов UML
Если пользователь хочет визуализировать систему, особенно объектно-ориентированную, требуется диаграмма
классов UML. Эта диаграмма является принятым стандартным языком для определения, документирования, визуа-
лизации и создания системных артефактов. Кроме того, если пользователь желает увидеть взаимосвязь каждого
класса, UML является правильной схемой.

*
======================================================================================================
8) ДОПОЛНИТЕЛЬНЫЕ МАТЕРИАЛЫ.

https://www.javatpoint.com/uml-class-diagram

https://www.visual-paradigm.com/guide/uml-unified-modeling-language/uml-class-diagram-tutorial/

https://medium.com/@smagid_allThings/uml-class-diagrams-tutorial-step-by-step-520fd83b300b

http://mmsa.kpi.ua/sites/default/files/disciplines/Розробка і тестування програм/didkovska_m_v_testing_lecture_5.pdf

*
======================================================================================================