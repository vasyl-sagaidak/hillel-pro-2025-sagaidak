Урок 10 (Понедельник - 27.01.2025)
Тема: Java IO. Работа с файлами.
======================================================================================================
Ключевые разделы:

1) JAVA IO API
2) РАБОТА С ПОТОКАМИ БАЙТОВ
3) РАБОТА С ПОТОКАМИ СИМВОЛОВ
4) РАБОТА С БУФЕРИЗИРОВАННЫМИ ПОТОКАМИ
5) РАБОТА С ФАЙЛАМИ И КАТАЛОГАМИ

======================================================================================================
1) JAVA IO API

    Класс File, определенный в пакете java.io, не работает непосредственно с потоками. Его задачей
    является управление информацией о файле и каталогах.

    Хотя на уровне операционной системы файлы и каталоги отличаются, в Java они описываются одним
    классом File.
    В зависимости от того, что должен представлять обьект File - файл или каталог, мы можем использовать
    один из конструкторов для создания обьекта:

*
======================================================================================================
2) РАБОТА С ПОТОКАМИ БАЙТОВ

     В основе всех классов, которые управляют потоками байтов, находятся два абстрактных класса:
     - InputStream (представляет потоки ввода);
     - OutputStream (представляет потоки вывода);

     |      InputStream     |     OutputStream      |
     |    FileInputStream   |   FileOutputStream    |
     |  BufferedInputStream | BufferedOutputStream  |
     | ByteArrayInputStream | ByteArrayOutputStream |
     |   FilterInputStream  |  FilterOutputStream   |
     |    DataInputStream   |   DataOutputStream    |
     |   ObjectInputStream  |  ObjectOutputStream   |

     Класс OutputStream является базовым классом для всех классов, которые работают с бинарными потоками записи.

     |      метод   | описание
     |    void flush()   | очищает буфер вывода, записывая все его содержимое
     |    void close()   | закрывает поток
     | void write(int b) | записывает в выходной поток один байт, который представлен целочисленным параметром b
     | void write(byte[] buffer) | записывает в выходной поток массив байтов buffer
     | void write(byte[] buffer, int offset, int length) | записывает в выходной поток некоторое число байтов,
                                                           равное length, из массива buffer, начиная со смещения offset,
                                                           то-есть с элемента buffer[offset].

     Класс InputStream является базовым для всех классов управляющих байтовыми потоками ввода.

     | Метод | Описание
     | int available() | возвращает количество байтов доступных для чтения в потоке
     | void close() | закрывает поток
     | int read() | возвращает целочисленное представление следующего байта в потоке. Когда в потоке не остается доступных
                    для чтения байтов, данный метод возвращает число -1
     | int read(byte[] buffer) | считывает байты из потока в массив buffer. После чтения возвращает число считанных байтов
                                 Если ни одного байта не было считано, то возвращает число -1
     | int read(byte[] buffer, int offset, int length) | считывает некоторое количество байтов, равное length, из потока
                                                         в массив buffer. При этом считанные байты помещаются в массиве,
                                                         начиная со смещения offset, то есть элемента buffer[offset].
                                                         Метод возвращает число успешно прочитанных байтов.
     | long skip(long number) | пропускает в потоке при чтении некоторое количество байт, которое равно number.

*
======================================================================================================
3) РАБОТА С ПОТОКАМИ СИМВОЛОВ

    Для работы с потоками символов были добавлены абстрактные классы Reader (для чтения потоков символов)
    и Writer (для записи потоков символов).

    |      Reader     |     Writer      |
    |    FileReader   |   FileWriter    |
    |  BufferedReader | BufferedWriter  |
    | CharArrayReader | CharArrayWriter |

    Абстрактный класс Reader
    Reader представляет функционал для чтения текстовой информации.

    | Метод | Описание
    | abstract void close() | закрывает поток ввода
    | int read() | возвращает целочисленное представление следующего символа в потоке. Если таких символов нет, и дости-
                   гнут конец файла, то возвращает число -1
    | int read(char[] buffer) | считывает в массив buffer из потока символы, количество которых равно длине массива
                                buffer. Возвращает количество успешно считанных символов. При достижении конца файла
                                возвращает -1
    | int read(CharBuffer buffer) | считывает в обьект CharBuffer из потока символы. Возвращает количество успешно
                                    считанных символов. При достижении конца файла возвращает -1
    | abstract int read(char[] buffer, int offset, int count) | считывает в массив buffer, начиная со смещения offset,
                                                                из потока символы, количество которых равно count
    | long skip(int count) | пропускает количество символов, равное count. Возвращает число успешно пропущенных символов

    Класс Writer - определяет функционал для всех символьных потоков вывода

     | Метод | Описание
     | Writer append(char c) | добавляет в конец выходного потока символ с. Возвращает обьект Writer.
     | Writer append(CharSequence chars) | добавляет в конец выходного потока набор символов chars. Возвращает обьект
                                           Writer.
     | void write(int b) | записывает во входной поток один байт, который представлен целочисленным параметром b.
     | abstract void close() | закрывает поток
     | abstract void flush() | очищает буферы потока
     | void write(int c) | записывает в поток один символ, который имеет целочисленное представление
     | void write(char[] buffer | записывает в поток массив символов
     | abstract void write(char[] buffer, int off, int len) | записывает в поток несколько символов из массива buffer.
                                                              Причем количество символов равно len, а отбор символов из
                                                              массива начинается с индекса off.
     | void write(String str) | записывает в поток строку
     | void write(String str, int off, int len) | записывает в поток из строки некоторое количество символов, которое
                                                  равно len, причем отбор символов из строки начинается с индекса off

     Класс FileWriter является производным от класса Writer. Он используется для записи текстовых файлов.
     FileReader наследуется от абстактного класса Reader и представляет функциональность для чтения текстовых файлов.


*
======================================================================================================
4) РАБОТА С БУФЕРИЗИРОВАННЫМИ ПОТОКАМИ

    Как правило Input & OutputStream напрямую не используются, а используются их реализации BufferedInputStream
    и BufferedOutputStream.

    Причина в том что стримы считывают информацию из файла побайтово (1 байт за 1 раз), то алгоритму приходится
    делать кучу лишних движений для чтения того или иного количества данных, открывать коннекшн с файловой системой,
    забирать 1 байт информации, потом закрывать коннекшн. Это стоит достаточно дороговато в плане вычислительных
    мощностей. По этой причине решили сделать буффер, в который забирается большее количество байт (например 32),
    и работаем с этим буффером позволяет обращаться к системе реже, и соответственно экономит ресурсы/оптимизирует работу.

    How To Close a Streams?

    При завершении работы с ресурсом, а поток является таковым, его необходимо закрыть с помощью метода close(),
    который определен в интерфейсе Closeable.
    Этот интерфейс уже реализуется в классах InputStream и OutputStream, а через них и во всех классах потоков.

    При закрытии потока освобождаются все выделенные для него ресурсы, например, файл.
    В случае, если поток окажется не закрытым, может происходить утечка памяти.

    Есть два способа закрытия ресурса:
    1) Традиционный, заключается в использовании блоков try..catch..finally
    2) try-with-resources - начиная с Java 7.
    Для работы с try with resources существует интерфейс AutoCloseable (он наследуется интерфейсом Closeable).

*
======================================================================================================
5) РАБОТА С ФАЙЛАМИ И КАТАЛОГАМИ

*
======================================================================================================