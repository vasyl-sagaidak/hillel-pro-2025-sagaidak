GENERIC (ОБОБЩЕНИЯ) - обобщения, это параметризованные типы. Сущность которая может хранить данные только одного
типа. Дженерики применяются начиная с Java 5, создаются при помощи даймонда и имени дженерика в имени класса:

public class Aviary<T extends Animal & Cloneable> {}

Позволяют создавать классы, интерфейсы, конструкторы и методы, где тип данных, с которым они работают,
указывается в качестве параметра. Интерфейс, класс или метод, который оперирует на параметризованном типе,
называется обобщенным (дженериком).

Дженерики (обобщения) добавили недостающую безопасность в отношении типов. Они так же упростили процесс, т.к. больше не
нужно явно использовать приведения типов для преобразования между Object и типом данных, с которым фактически
выполняются операции.
Благодаря обобщениям (дженерикам) все приведения становятся автоматическими и неявными. В результате, обобщения
(дженерики) расширили возможности многократного применения кода с надлежащей безопасностью и легкостью.

Пример обьявления дженерик типа:

public class Gen <T> { // Т - имя параметра типа.
T variableName;

public Gen(T obj) { //Параметр типа передается в качестве аргумента в конструктор
this.variableName = obj;
}

T getOb() { //Параметр типа возвращается из метода.
return variableName;
}

void showType() { //Вытаскиваем информацию о переданном в класс типе.
System.out.println("Tипом Т является " + variableName.getClass().getName());
}
}

ЗАЧЕМ НУЖНЫ ОБОБЩЕНИЯ (GENERIC)???

1) Более сильная проверка типов во время компиляции и устранение необходимости явного приведения.
2) Помогают избегать ClassCastException.

СВОЙСТВА ДЖЕНЕРИКОВ???

1) Могут наследоваться от классов и интерфейсов.
2) Реализуют множественное наследование при помощи ключевого слова extends и знака амперсанда &.
3) В методе дженерика можно вызвать абстрактный метод суперкласса, поскольку мы ограничиваем тип параметра
дженерика классом, где этот метод определен.

!!!! Используя дженерик нужно понимать, что мы будем оперировать только методами базового класса, которым мы
ограничили наш тип !!!

TYPE ERASURE(СТИРАНИЕ ТИПОВ)???

Информация об обобщениях (дженериках) доступна только на этапе компиляции. В рантайме вся информация о них стирается.
Алгоритм Type Erasure был добавлен с целью поддержки легаси кода, для достижения обратной совместимости.

ОБОБЩЕНИЯ (GENERIC) ПАРАМЕТРИЗУЮТСЯ:
- Интерфейсами;
- Врапперами и Классами;
- Енамами;

Примитивные типы НЕЛЬЗЯ!

