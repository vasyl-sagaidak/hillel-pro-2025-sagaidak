
IoC (Inversion Of Control) container - в String представлен в двух реализациях:
1. BeanFactory
2. ApplicationContext - у данной реализации чуть более расширенный функционал.

@Bean - бины, это обьекты, которые являются основой программы и управляются Spring IoC
        контейнером. Эти обьекты создаются с помощью конфигурационных мета-данных,
        которые указываются в контейнере (например XML - <bean>...</bean>), либо с
        помощью аннотации @Bean.

_________________________________
Свойства Бина в Spring Framework:
---------------------------------

1. class - указывает конкретный класс, который будет использован для создания бина.
2. name - уникальный идентификатор бина (обычно это имя класса, с маленькой буквы).
3. scope - область видимости создаваемых обьектов.
4. constructor-arg - определяет конструктор, который используется для внедрения зависимости.
5. properties - определяет свойства использования зависимости.
6. initialization method - метод инициализации бина.
7. destruction method - метод уничтожения бина, который будет использован при уничтожении
                        контейнера, который содежит бин.
8. autowiring mode - определяет режим автоматического связывания во время внедрения зависимости.
9. lazy-initialization mode - дает контейнеру IoC команду создавать экземпляр бина при первом
                              запросе к нему, а не во время запуска.
________________________________________
Области видимости бинов (Bean's scopes):
----------------------------------------

1. singleton - определяет один-единственный бин для каждого контейнера Spring IoC (настройка по умолчанию).
2. prototype - позволяет иметь любое количество экземпляров бина.
3. request - создается один экземпляр бина на каждый запрос HTTP.
4. session - создается один экземпляр бина на каждую сессию HTTP.
5. global-session -  создается один экземпляр бина на каждую глобальную сессию HTTP. Касается
                     исключительно ApplicationContext контейнера.

---------------
Spring context:
---------------

IoC Container (
            ApplicationContext (
                              BeanFactory -> Resource Object
                              )
              ) -> Meta Data file for bean definition like XML, property file, annotation etc.)

_______________
Bean Lifecycle:
---------------
Базовый жизненный цикл бина: создание - работа- уничтожение.
На этапе создания и уничтожения можно использовать обработчики (методы).
Мы жизненным циклом не управляем, все это за нас делает спринг.

____________________
 BeanPostProcessors:
 -------------------
 Позволяют имплементированть некоторые методы бинов перед инициализацией и после инициализации экземпляров
 бина.
 * postProcessBeforeInitialization
 * postProcessAfterInitialization

__________________
 Beans autowiring:
------------------
Spring Framework позволяет выполнять автоматическое связывание бинов(autowiring).

Виды связываний:

* по имени (дефолтный вариант)
* по типу
* через конструктор (best practice автовайрить через конструктор!!!).

------------
Spring Boot:
------------
Spring Boot является проектом (модулем) на уровне Execution (уровень выполнения) Spring Framework.
Spring Boot это подпроект Spring, предназначенный для того, что-бы сделать более легкую настройку и
развитие программ. Вцелом конфигурация очень сильно минимизируется. Spring Boot поддерживает встро-
енный контейнер (embedded containers) который поднимается внутри, и нет необходимости использовать
дополнительно Web Server.

Преимущества Spring Boot:

Spring Boot = Spring Framework
                                + Embedded HTTP Servers (Tomcat, Jetty,...)
                                - XML <bean> Configuration or @Configuration.

* Минимизирует время разработки и поднимает продуктивность;
* Уменьшает количество шаблонного, однотипного кода Spring конфигураций;
* Легко позволяет нам взаимодействовать подсистемами Spring, такими как Spring JDBC, Spring ORM,
  Spring Data, Spring Security, etc;
* Предоставляет встроенный Server (Embedded HTTP Servers) как то Tomcat, Jetty;
* Предоставляет множество плагинов для быстрой разработки и тестирования программы Spring Boot
  с использованием Build Tools, таких как Maven и Gradle;
* Предлагает множество плагинов для легкой работі с контейнерами, встроенными БД (embedded database)
  и базами данніх, которые сохраняются в памяти (in-memory Databases);

----------------------------
 Embedded servlet container:
----------------------------

Каждое Spring Boot веб-приложение включает в себя встроенный web-server. Другими словами, больше нет
нужды вручную деплоить war-ник на сервер.

Создание автономных веб-приложений с встроенными серверами:
    - удобство в разработке.
    - удобство в мире микро-сервисов.

По умолчанию используется Apache Tomcat.

---------------------
Spring Boot starters:
---------------------

spring-boot-starter-parent
Когда мы додаем модули в помнике, это и есть стартеры, готовые проекты в Spring Boot. Стандартные
зависимые библиотеки spring-boot-starter-parent, добавляемые через депенденси. Необходимо только
обьявить <parent> в файле pom.xml вашего проекта.

<parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.0.0.RELEASE</version>
    <relativePath/>
</parent>

spring-boot-starter-web - превращает консольный проект в web app.

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>

Тоесть, указывая перент с версией релиза, нам потом не нужно указывать версии в стартерах,
они подтягивают версию ориентируясь на указанную в перент.

___________________________
Main-class Spring Boot App:
---------------------------

Аннотация @SpringBootApplication включает в себя @Configuration, @EnableAutoConfiguration и
@ComponentScan. Данные инструкции через аннотации полностью заменяют ХМL конфигурацию.
В Spring Boot конфигурация аннотациями является приоритетной.

-------------------
Аннотации в Spring:
-------------------

@Component - универсальный компонент.
@Repository - компонент, предназначенный для хранения, извлечения и поиска. Как правило используется
              для работы с базами данных.
@Service - фасад для бизнес логики.
@Controller - для создания взаимодействия со слоем Servlet
@RestController - расширение @Controller
@Configuration - универсальный компонент.
@Autowired - используется когда нам нужно предоставить какой-то обьект внутрь другого обьекта.
@Value - инициализация поля по значению конфигурации.

