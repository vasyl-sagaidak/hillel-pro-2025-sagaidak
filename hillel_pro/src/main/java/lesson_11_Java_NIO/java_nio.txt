Урок 11 (Четверг - 30.01.2025)
Тема: Java NIO. Работа с файлами.
======================================================================================================
Ключевые разделы:

1) JAVA NIO API
2) ОТЛИЧИЯ МЕЖДУ JAVA IO И JAVA NIO
3) ФАЙЛОВАЯ СИСТЕМА JAVA NIO
4) РАБОТА С ФАЙЛАМИ ЧЕРЕЗ JAVA NIO
5) ПРИМЕР РАБОТЫ С ФАЛАМИ JAVA NIO
6) РАБОТА С ФАЙЛАМИ ЧЕРЕЗ JAVA NIO2
7) ДОПОЛНИТЕЛЬНЫЕ МАТЕРИАЛЫ

======================================================================================================
1) JAVA NIO API

    Java NIO (New Input/Output) API - буфер-ориентированный подход/пакет.

    Данные считываются в буфер, из которого они потом обрабатываются, используя канал. Можем перемещаться
    вперед и назад в буфере.

    JAVA NIO - это двунаправленная передача данных. Это дает немного больше гибкости во время обработки. Однако,
    нам так же необходимо проверять есть ли в наличие в буфере все необходимые данные для полной обработки. И нам
    необходимо убедиться, что во время чтения дополнительных данных в буфер мы не перезаписываем те данные в буфере,
    которые мы еще не обработали.

    Java NIO API определяет буферы, которые являются контейнерами для данных, и других структур, таких как наборы
    символов, каналы и выбираемые каналы.

    Наборы символов (charsets) - это отображение/сопоставление между байтами и символами Unicode.

    Каналы (channels) - предоставляют соедниение с обьектами, способными выполнять операции ввода/вывода (I/O).

    Выбираемые каналы (selectable channels) - каналы, которые можно мультиплицировать, то есть они могут обрабатывать
    несколько операций ввода/вывода в одном канале.

                                               Преимущества NIO?

    Высокая продуктивность: Пакет Java NIO был разработан для повышения продуктивности операций ввода/вывода в Java
    приложениях. Позволяет обрабатывать несколько операций I/O одновременно, что делает его идеальным в использовании
    для сетевых приложений, где низкая задержка и высокая пропускная способность являются критически важными.

    Эффективное использование памяти: NIO оптимизирует использование памяти, предоставляя прамой доступ к буферам,
    что снижает потребность в промежуточных структурах данных. Это особенно полезно для обработки больших обьемов
    данных, таких как файлы либо сетевые потоки.

    Сетевое программирование: Пакет Java NIO является отличным выбором для создания высокопродуктивных сетевых серверов и
    клиентов. Он позволяет эффективно обрабатывать несколько соединений, снижая риск конфликтов потоков, что делает его
    идеальным для масштабированных приложений, которые обрабатывают множество одновременных соединений.

    Операции с файлами: NIO предоставляет альтернативу традиционным классам I/O для работы с файлами. Он позволяет
    эффективно читать и записывать данные с файлов, особенно с большими файлами, где традиционные методы могут
    сталкиваться с ограничениями.

    Расширяемость: Java NIO предлагает гибкую и расширяемую архитектуру, которая позволяет разработчикам создавать
    собственные реализации I/O для конкретных случаев использования. Это делает его полезным для создания специальных
    приложений, которые требуют оптимизированных операций I/O/

    Уменьшение нагрузки на процессор: NIO уменьшает нагрузку на процессор, поскольку он не блокирует потоки во время
    ожидания операций I/O.


                                            Что было введено в NIO?

    Буферы: NIO вводит концепцию буфферов, которые являются фиксированными по размеру контейнерами данных,
    которые используются для эффективной передачи данных между разными компонентами I/O. Буферы можно создавать
    для разных типов данных, таких как байты, символы и целые числа.

    Каналы: Каналы являются путями, по которым происходит передача данных в NIO. Они предоставляют низкоуровневый,
    высокопродуктивный механизм для чтения с разных источников и записи в них, включая файлы, сокеты и пайплайны.

    Селекторы: Селекторы являются важным компонентом для управления операциями з неопределенным I/O. Они позволяют
    мониторить несколько каналов и определять, когда они готовы к чтению или записи, что обеспечивает эффективную
    обработку нескольких соединений.

    Селекторы Java NIO позволяют одному потоку контролировать несколько каналов ввода. Вы можете зарегестрировать
    несколько каналов при помощи селектора, а потом использовать один поток, что бы "выбирать" те каналы, которые имеют
    входные данные, доступные для обработки, либо выбрать те каналы, которые готовы к записи. Данный механизм выбора
    позволяет одному потоку легко оперировать несколькими каналами.

                                            Blocking vs. Non-Blocking IO

    Разные потоки JAVA IO блокируются. Это означает, что когда поток вызывает read() либо write(), этот поток
    блокируется до тех пор, пока не будет данных для чтения, либо пока данные не будут полностью записаны. Поток
    тем временем является занятым (заблокированным) и не может делать ничего другого.

    Неблокирующий режим JAVA NIO позволяет потоку запрашивать данные о чтении с канала и получать только то,
    что доступно на данный момент, или вообще ничего, если данные в данный момент не доступны. Вместо того, что бы
    оставаться заблкированным до тех пор пока данные не станут доступными для чтения, поток может продолжаться с чем
    то другим.


*
======================================================================================================
2) ОТЛИЧИЯ МЕЖДУ JAVA IO И JAVA NIO

        |                 IO                  |                  NIO                   |
        |     Потокоориентированный подход    |    Буфер-ориентированный подход        |
        | Блокирующий (синхронный) ввод/вывод | Неблокирующий (асинхронный) ввод/вывод |
        |                                     |               Селекторы                |

    Изначальный релиз Java включал пакет java.io. (Java IO), который содержал класс File для доступа
    к файловой системе. Этот класс, как адвокат, способен представлять как файлы, так и каталоги (папки)
    и предлагает набор ограниченных операций для работы с файловой системой, таких как создание новых
    файлов и каталогов, проверка их существования и проверка разрешений на чтение/запись.

    В Java 1.4 для преодоления ограничений пакета IO был представлен пакет java.nio. (Java NIO), этот
    пакет содержит неблокирующие API ввода/вывода. Особенностью работы с файловой системой является
    использование буферов и каналов.

    Что такое заблокированный IO?
    В Java IO, каждый раз, когда поток (тут имеется ввиду определенный процесс) вызывает метод read() либо write()
    в потоке, поток блокируется (сосредотачивается на выполнении определенных действий над данными), до тех пор пока
    не появятся данные для чтения или записи. Поток разблокируется после завершения операции чтения или записи.

    NIO.2 (Java NIO2), так же известный как пакет java.nio.file, был представлен в Java 1.7. Этот пакет представляет
    асинхронный подход к неблокирующему ввода-вывода, который не поддерживался в предыдущем пакете java.nio. Одним
    из наиболее значимых (важных) изменений в этом пакете является добавление высокоуровневых манипуляций с файлами,
    которые облегчаются благодаря использованию Interface Path, Class Files, Class Paths.

                                          Основное отличие Java IO от Java NIO

    Основное отличие Java IO от Java NIO состоит в том, что Java IO - это пакет, ориентированный на поток, что означает,
    что он может считывать один или несколько байтов за раз из потока. При использовании Java IO потоки блокируются.
    Когда поток вызывает read() или write(), поток блокируется до тех пор, пока не появятся данные для чтения либо
    данные не будут полностью записаны. В это время поток не может делать ничего другого. В Java NIO, потоки не блоки-
    руются. Поток может запрашивать чтение данных из канала и получать только то, что есть в данный момент, либо вообще
    ничего, если данные в данный момент не доступны. Во время отсутствия доступа к данным поток может выполнять другую
    работу.

    Пакет java.io предлагает ряд функций:
        - Классы InputStream и OutputSteam предназначены для доставки информации с шагом в 1 байт.
        - Потоки имеют удобные оболочки через классы Reader и Writer.
        - Режим ожидания, известный как режим блокирования, используется для обеспечения получения всего сообщения
          перед продолжением.

    Пакет java.nio предлагает следующие функции:
        - Буферизация предусматривает считывание данных небольшими фрагментами, а не всех одновременно.
        - Класс CharsetDecoder используется для превращения читабельных символов в необработанные байты и наоборот.
        - Использование канала как среды связи для свящи с внешней средой, где находятся обьекты, которые могут
          выполнять операции ввода-вывода.
        - Позволено выполнять мультиплицирование через класс SelectableChannel и предоставлять доступ к любым
          доступным каналам для операций ввода-вывода.
        - При чтении, неблокирующий режим используется для получения данных, как только они становятся доступными.
*
======================================================================================================
3) ФАЙЛОВАЯ СИСТЕМА JAVA NIO: РАБОТА С ФАЙЛАМИ ЧЕРЕЗ JAVA NIO.

    Для работы с файловой системой Java NIO, в частности, предлагает буферы (buffers) и каналы (channels).

    Буферы используются в качестве контейнеров, где можно считывать данные с/в буфер для последующей обработки
    с помощью канала.

    Для каждого примитивного типа (byte, char, double, float, int, long, short) существует тип буфера, то есть класс.
    Классы буферов наследуют Class Buffer и представлены следующими классами: ByteBuffer, CharBuffer, DoubleBuffer,
    FloatBuffer, IntBuffer, LongBuffer, ShortBuffer. Наиболее часто используемый тип буфера – ByteBuffer.

    С описанием классов буферов можно ознакомиться в документации:
    https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/package-summary.html#buffers

    В классе Buffer определены показатели записывающие состояние базовых элементов данных: capacity, limit,
    position, mark.

    capacity (емкость) – максимальный фиксированный размер буфера. Буфер – это тип фиксированного размера,
                         мы можем хранить только максимум «фиксированного количества» данных. Представляет
                         количество элементов, которые могут содержать буфер. Это значение никогда не меняется
                         в течение жизненного цикла. Это значение устанавливается при создании буфера. Как только
                         буфер заполнен, его следует очистить перед записью в него.

    limit (предел) - указывает индекс первого элемента, который нельзя читать или записывать. Он не должен превосходить
                     емкость. То есть, он представляет количество активных элементов в буфере.

    position (позиция) - указывает индекс следующего элемента для чтения или записи. Позиция буфера никогда не
                         отрицательна и никогда не превышает его лимита.

    mark (метка) – позиция, которая запоминается. Когда создаем новый экземпляр ByteBuffer, mark (отметка) не определена,
                   position (позиция) равна 0, а limit (предел) равен сapacity (емкости).

    Канал подобный потоку в Java IO. Каналы используются для двухсторонней связи (двухнаправленной передачи). Каналы -
    двухнаправленные, а потоки - однонаправленные. Используя канады, можно выполнять неблокирующие операции ввода/вывода,
    читать/записывать данные с/в буфер(а) с каналов.

    Для работы с файлами, используется класс FileChannel, который имплементирует Interface Channel.

    Interface Channel является базовым интерфейсом для интерфейсов и классов каналов. В плане работы с файлами,
    представляет открытое соеднинение с обьектом, таким как, в частности, файл, который способен выполнять операции
    ввода/вывода, например чтение или запись.

*
======================================================================================================
4) ФАЙЛОВАЯ СИСТЕМА JAVA NIO: ПРИМЕР РАБОТЫ С ФАЛАМИ JAVA NIO

    Продемонстрируем работу буфера и канала с помощью Class ByteBuffer и Сlass FileChannel.
    Смотри классы:
    - ByteBufferFileChannelWriteExample - пример создания файла и записи в него.
    - ByteBufferFileChannelReadExample - пример чтения из файла и вывода в консоль.
*
======================================================================================================
5) РАБОТА С ФАЙЛАМИ ЧЕРЕЗ JAVA NIO2

    Для работы с файловой системой через Java NIO2 используем возможности пакета java.nio.file , а именно
    Interface Path, Class Files, Class Paths. То-есть используем Files API и Path API.

    Детальное описание составляющих пакета java.nio.file можно найти в документации Package.java.nio.file:
    https://docs.oracle.com/javase/8/docs/api/java/nio/file/package-summary.html

    Класс Files предлагает определенные возможности для чтения, записи и работы с файлами и каталогами. Методы
    класса Files работают над экземплярами обьектов Path.

    Примеры работы смотри в класах:
    - NIO2CreateDirectoryExample - Создание новой директории/каталога/папки
    - NIO2CreateAndWriteToFileExample - Создание файла и последующая запись в него
    - NIO2ReadFromFileExample - Чтение из файла
    - NIO2DeleteFileExample - Удаление файла
*
======================================================================================================
6)

*
======================================================================================================
7) ДОПОЛНИТЕЛЬНЫЕ МАТЕРИАЛЫ

*
======================================================================================================
8)

*
======================================================================================================
9)

*
======================================================================================================