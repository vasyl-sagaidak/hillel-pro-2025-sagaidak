Урок 09 (Понедельник - 20.01.2025)
Тема: Обобщения - Generics
======================================================================================================
Ключевые разделы:

1) ПОНЯТИЕ ОБОБЩЕНИЙ
2) ОБОБЩЕННЫЙ КЛАСС
3) ОБОБЩЕННЫЙ ИНТЕРФЕЙС
4) ОБОБЩЕННЫЕ МЕТОДЫ
5) ПАРАМЕТРЫ ОГРАНИЧЕННОГО ТИПА
6) ЗНАК ПОДСТАНОВКИ (WILDCARD)

======================================================================================================
1) ПОНЯТИЕ ОБОБЩЕНИЙ

Обобщения (Generics) - параметризованные типы.

Параметризованные типы позволяют обьявлять классы, интерфейсы и методы, где тип данных, которым они оперируют,
указывается как параметр.

Чаще всего используемые имена параметров типа:
T - Type
V - Value
E - Element
K - Key
N - Number
S, U, V итп - типы 2-й, 3-й, 4-й

Классы, интерфейсы либо методы, которые имеют дело с параметризованными типами, называются обобщениями,
обобщенными классами либо обобщенными методами - дженериками.

Обобщенное программирование - написание кода, который может быть неоднократно использован с обьектами разных типов.

Дженерики работают только с обьектами, но не работают с примитивными типами.

Можем написать Product<Integer>, но не можем использовать тип int или double, например Product<int>.

Преимущества обобщений:

Написание безопасного кода, который легче читается, чем код, прегруженный переменными типа Object и приведением
типов.

Избежание жесткого определения используемых типов. Определение ошибок во время компиляции, а не во время выполнения.
Компилятор Java применяет жесткую проверку типов к общему коду и выдает ошибки, если код нарушает безопасность типов.
Исправить ошибки во время компиляции проще, чем исправить ошибки во время выполнения, которые можно будет найти.

Универсализация методов. Например, написать универсальный метод для сортировки массива обьектов, а потом вызвать
универсальный метод с Integer массивами, Double массивами, String массивами итп.

Возможность реализовывать универсальные алгоритмы, которые работают с коллекциями разных типов, которые могут быть
соответствующе настроены, а таже безопасны для типов и легче читаются.

*
======================================================================================================
2) ОБОБЩЕННЫЙ КЛАСС

Обобщенный класс - класс, который может ссылаться на любой тип.

При помощи обобщений можно ссылаться на любой параметризованный тип.

При определении переменной класса после имени класса в угловых скобках < > нужно указать, какой тип будет
использоваться.

Параметризованный тип может иметь один или несколько параметров, разделенным запятыми.

Т обычно используется для представления типа, который может быть параметризованным типом Integer, String, Float,
Double либо Character.

Примитивные типы, такие как int, char, float, double не должны быть использованы для Т.

Для создания обобщенного экземпляра(обьекта) используется следующий синтаксис:
GenericClass<T> object = new GenericClass<>();

Именно с классом-оберткой Integer:
GenericClass<Integer> object = new GenericClass<>();

Параметризованный Т замененный классом-враппером Integer, который допускает только значения типа Integer.

*
======================================================================================================
3) ОБОБЩЕННЫЙ ИНТЕРФЕЙС

Обобщенный интерфейс создается так же как и обобщенный класс.

//public interface Interface<T> {
}

Однако, при реализации обобщенного интерфейса необходимо придерживаться некоторых условий.
Класс, который реализует обобщенный интерфейс должен быть обобщенным.

Необобщенный класс может использоваться, если конкретный тип (Integer, String, Double итп) предоставляется
с интерфейсом при реализации.

Обобщенный класс, реализующий обобщенный интерфейс может иметь другие параметры параметризованного типа.

*
======================================================================================================
4) ОБОБЩЕННЫЕ МЕТОДЫ

Обобщенные методы - методы, которые допускают любой тип аргумента, ссылаясь на параметризованные типы.

В обобщенных методах область действия аргумента является локальной относительно метода, в котором он определен.
Обобщения позволяют использовать как статические, так и нестатические методы.

Параметр типа, так-же известный как переменная типа, является идентификатором, который определяет имя обобщенного
типа.

Параметры типа могут использоваться для объявления возвращаемого типа и действовать как заполнители
для типов аргументов, передаваемых обобщенному методу, которые известны как аргументы фактического типа.

Обобщенный метод объявляется так же, как и любой другой метод. Параметры типа могут представлять
только ссылочные типы, но не примитивные типы.

*
======================================================================================================
5) ПАРАМЕТРЫ ОГРАНИЧЕННОГО ТИПА

Параметры ограниченного типа (bounded type) - нужны в случаях, когда необходимо ограничить типы, которые
могут быть использованы как аргументы типа в параметризованном типе.

Например, метод, который работает с числами, должен принимать только экземпляры Number либо его подклассов
(Integer, Double, Long итп).

*
======================================================================================================
6) ЗНАК ПОДСТАНОВКИ (WILDCARD)

Знак подстановки (Wildcard) - знак, который позволяет ссылаться на неизвестные типы.

Обозначается символом ?, означает любой тип может ссылаться на любой обьект.

Знак подстановки можно использовать в разных ситуациях: как тип парамера, поля или локальной переменной.

Неограниченный знак подстановки полезен когда:
- метод реализован с использованием функций, которые предоставляются в классе Object.
- обобщенный класс содержит методы, которые зависят от параметра типа.

Знак подстановки не используется как аргумент типа для вызова обобщенного метода, создания экземпляра обобщенного
класса либо супертипа. Например, не можем создать новый ArrayList<?> либо new ArrayList<? extends String>.
Можем создать new ArrayList<String> и назначить его переменной с типом подстановки.

*
======================================================================================================