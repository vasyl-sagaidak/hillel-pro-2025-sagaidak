Урок 08 (Четверг - 16.01.2025)
Тема: Исключения
======================================================================================================
Ключевые разделы:

1) ПОНЯТИЕ ИСКЛЮЧЕНИЙ, ИХ НАЗНАЧЕНИЕ
2) ТИПЫ ИСКЛЮЧЕНИЙ
3) ПЕРЕХВАТ И ОБРАБОТКА ИСКЛЮЧЕНИЙ
4) КАСТОМНЫЕ ИСКЛЮЧЕНИЯ

======================================================================================================
1) ПОНЯТИЕ ИСКЛЮЧЕНИЙ, ИХ НАЗНАЧЕНИЕ

Exception - событие которое возникает во время выполнения программы и не позволяет нормально выполнять
поток инструкций, исключительная ситуация которая произошла во время выполнения кода.



*
======================================================================================================
2) ТИПЫ ИСКЛЮЧЕНИЙ

Главный класс в иерархии исключений Throwable, от него унаследуются Error’ы и Exception’ы.
Exception’ы делятся на Checked Exception и Unchecked Exception.

1)	Checked Exception (Сompile-Time Exceptions) – возникают на этапе компиляции, наследуются от
класса Exception, ловить и обрабатывать их нужно для того что бы программа работала, иначе они ее ложат.
В основном возникают из-за того что юзеры передали нам какие-то неправильные данные (классический пример
чекед ексепшна: FileNotFoundException. Наследуется от IOException, который в свою очередь наследуется
от класса Exception).

Классы, которые напрямую наследуют класс Throwable, кроме RuntimeException и Error. К примеру:
IOException, SQLException, итп. Сhecked Exception проверяются во время компиляции (at Compile Time).

2)	Unchecked Exception (Runtime Exceptions) – возникают уже во время выполнения программы,
зачастую классические ошибки программиста. Классы, которые наследуют RuntimeException (ArithmeticException,
NullPointerException, ArrayIndexOutOfBoundsException).

Unchecked Exception не проверяются на стадии компиляции, но проверяются в рантайме.

3)	Error – ошибки возникающие в JVM. Пример: StackOverflowError(Stack), OutOfMemoryError(Heap),
VirtualMachineError, AssertionError итп.

*
======================================================================================================
3) ПЕРЕХВАТ И ОБРАБОТКА ИСКЛЮЧЕНИЙ

Обработка исключений - процесс определения последовательности шагов в программе обработки исключения.
Предоставляя обработчики исключений в программе, мы можем обеспечить нормальное выполнение программы.

Не прерывать нормальный поток выполнения программы - основное использование обработчиков исключений в
программе. Без обработчиков исключений программа будет завершена аварийно, и нормальный поток выполнения
будет прерван в случае исключения.

Варианты обработки исключений:
1) Перехват и обработка исключения при помощи try,catch,finally (throw) на месте.
2) Пробрасывание исключения выше при помощи throws в сигнатуре метода.

Перехват и обработка исключения
Используются блоки try, catch, finally - для написания обработчика исключений. Ключевое слов try используется
для указания блока, в котором должен расположиться код исключения.

Невозможно использовать только блок try. С блоком try должен идти либо блок catch, либо finally.
Блок catch используется для обработки исключения. Блоку catch должен предшествовать блок try, то-есть нельзя
использовать блок catch как отдельный. За блоком catch может быть блок finally.

Ключевое слово [ throw ] используется для создания исключения. Мы указываем обьект исключения, который должен
быть сгенерирован. Исключение содержит сообщение с описанием ошибки. Эти исключения могут быть связаны,
например, с валидацией данных на правильность их ввода, соответствия определенному критерию, и.т.п.

Ключевое слово [ throws ] используется для обьявления исключений; Указывает что в методе может возникнуть
исключение; Не вызывает исключения; Всегда используется с сигнатурой метода. Метод должен предоставть условие
throws, в котором перечислены исключения.

Отличия throw и throws:

throws используется для обьявления исключения, то-есть работает аналогично блоку try-catch.
Ключевое слово throw используется для явной генерации исключения.

throw используется в теле метода для создания исключения, а throws используется в сигнатуре метода для обьявления
исключений, которые могут возникать в операторах, присутствующих в методах.

По синтаксису, за throw следует экземпляр класса Exception, например,
throw new ArithmeticException("....");.
За throws - имена классов исключения, throws ArithmeticException.

*
======================================================================================================
4) КАСТОМНЫЕ ИСКЛЮЧЕНИЯ

Кастомные исключения предоставляют информацию или функционал, которые не являются частью стандартных
исключений Java.

Стандартные исключения охватывают практически все общие типы исключений, которые могут возникнуть во время
работы программы. Но, иногда нам необходимо создавать свои собственные (кастомные) исключения.

Кастомное исключение должно обеспечить конкретику в отношении определенного конкретного функционала или контекста
разработки, когда стандартные исключения этого не предоставляют. Пользователям программы или разработчикам
полезно понимать в чем именно состоит проблема, например, конкретной бизнес-логики.

В Java можно создавать кастомные исключения, которые являются наследниками классов Exception и RuntimeException.
Class Exception и Class RuntimeException предоставляют соответствующие конструкторы, которые могут иметь определенные
параметры для описания исключения, в том числе Throwable паркмер, который более детально должен описывать причину
исключения. Перехваченное исключение обычно содержит важную детальную информацию, которая может понадобиться для
анализа специфической исключительной ситуации.

Когда реализуем НЕПРОВЕРЯЕМОЕ (Unchecked, RuntimeException) исключение, следует расширять класс RuntimeException
для создания собственного класса исключений. Так-же необходимо предоставить метод конструктора, который имеет
соответствующие параметры и устанавливает их для суперкласса.

Когда реализуем ПРОВЕРЯЕМОЕ исключение, мы расширяем класс Exception для создания собственного класса исключений.
Так-же следует предоставить метод конструктора, который имеет соответствующие входные параметры и устанавливает их
для суперкласса.

Если кастомное исключение, в основном, связано с бизнес логикой, можно отдать предпочтение тому, что сделать его
непроверяемым исключением ( расширить от класса RuntimeException). Это может вести к более чистому коду, поскольку
не придется перехватывать исключения на каждом уровне.

*
======================================================================================================
