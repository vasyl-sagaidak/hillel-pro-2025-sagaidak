Урок 23 (ЧЕТВЕРГ - 20.03.2025)
Тема: ИНСТРУМЕНТЫ СБОРКИ
======================================================================================================
Ключевые разделы:

1) ИНСТРУМЕНТЫ СБОРКИ ПРОЕКТА
2) APACHE MAVEN
3) GRADLE
4) MAVEN vs GRADLE
5) ДОПОЛНИТЕЛЬНЫЕ МАТЕРИАЛЫ

======================================================================================================
1) ИНСТРУМЕНТЫ СБОРКИ ПРОЕКТА

Инструменты сборки (build tools) - это програмы, которые используются для автоматизации процесса сбор-
ки, компиляции, тестирования и развертывания программного обеспечения. Они позволяют разработчикам эффе-
ктивно управлять процессом разработки и обеспечивают стабильную и прогнозируемую сборку программного
обеспечения.

Инструменты сборки используются для автоматизации процесса разработки программного обеспечения. Вот
несколько причин, почему их используют:

1. Автоматизация сборки: Инструменты сборки позволяют автоматизировать процесс компиляции, построения
и сборки программного обеспечения из сорскода. Это обеспечивает стабильные и прогнозированные сборки,
что помогает избежать ошибок, связанных с ручной сборкой проектов.

2. Управление зависимостями: Build Tools позволяют удобно управлять зависимостями между разными библи-
отеками и компонентами программного обеспечения. Они автоматически загружают и устанавливают необходи-
мые зависимости из удаленных репозиториев.

3. Стандартизация процесса сборки: Использование Build Tools позволяет стандартизировать процесс сборки
и обеспечить его повторяемость на разных средах разработки.

4. Интеграция с другими инструментами: Инструменты сборки могут быть легко интегрированы с другими инстру-
ментами разработки, такими как системы контроля версий (например Git), системы автоматизации тестирования
(например Jenkins) и системы управления конфигурациями (например Ansible).

5. Оптимизация сборки: Некоторые инструменты сборки могут автоматически определять и устранять лишние шаги
сборки, что позволяет ускорить время сборки и уменьшить размер исходного кода.

Самые популярные Build Tools в Java:

1. Apache Maven: Это мощный инструмент сборки и управления проектами, основанный на конфигурационных
   файлах XML (pom.xml). Maven автоматизирует процесс управления зависимостями, сборки, тестирования
   и развертывания проекта.

2.Gradle: Gradle – мощный инструмент автоматизации сборки и управления зависимостями, который придает
  гибкость и простоту конфигурации. Он использует Groovy или Kotlin DSL для описания зависимостей и
  задач сборки.

3. Apache Ant: Ant – это инструмент сборки, использующий XML-подобные скрипты для описания процесса
   сборки. Он может использоваться для автоматизации любых задач, связанных с разработкой программного
   обеспечения.

4. Bazel: Bazel – это инструмент сборки и тестирования от Google, позволяющий эффективно собирать большие
   проекты. Он использует язык Skylark для описания сборки.

Данные инструменты обеспечивают разные уровни функциональности и гибкость, по этому выбор конкретного
инструмента зависит от требований вашего проекта и собственных предпочтений.

*
======================================================================================================
2) APACHE MAVEN

Apache Maven – это мощный инструмент сборки и управления проектами в среде разработки программного
обеспечения.

Вот некоторые ключевые особенности и функциональность Apache Maven:

1) Сбор проектов: Maven позволяет легко собирать проекты из исходных кодов в исполняемые программы или
   артефакты. Он автоматически определяет и решает вопрос с зависимостями проекта, загружая необходимые
    библиотеки из централизованных репозиториев.

2) Управление зависимостями: Maven позволяет удобно управлять зависимостями проекта через файл конфигурации
   POM (Project Object Model). Он автоматически устанавливает необходимые библиотеки и их версии централизованных
   репозиториев Maven.

3) Структурирование проектов: Maven предлагает стандартную структуру каталогов для проектов, способствующую их
   понятности и организации. Эта структура включает каталоги для исходного кода, ресурсов, тестов и т.п.

4) Жизненный цикл проекта: Maven предоставляет возможность выполнения различных операций в жизненном цикле
   проекта, таких как сборка, тестирование, развертывание и другие. Это позволяет легко автоматизировать и
   управлять процессом разработки.

5) Расширение функциональности: Maven позволяет расширять свою функциональность с помощью плагинов. Это
   позволяет разработчикам создавать собственные решения и интегрировать их в процесс сборки и разработки
   проектов.

Установка Apache Maven на локальной машине:

Linux:
            https://ubunlog.com/uk/apache-maven-instalacion-ubuntu/

Windows:
            https://phoenixnap.com/kb/install-maven-windows

MacOS:
            https://www.digitalocean.com/community/tutorials/install-maven-mac-os


POM (Project Object Model) - это основной конфигурационный файл в проектах Apache Maven. Он определяет
структуру и зависимости проекта, описывает его конфигурацию и делает другие важные настройки.

1. ЗАЧЕМ ИСПОЛЬЗОВАТЬ POM.XML ???

- Управление зависимостями: POM позволяет описать все зависимости проекта, включая использованные
  библиотеки и их версии. Это помогает Maven автоматически загружать и устанавливать все необходимые
  библиотеки из централизованных репозиториев.

- Конфигурирование проекта: POM позволяет настраивать разнообразные параметры проекта, такие как вер-
  сия проекта, идентификатор группы, артефакт и другие.

- Структурирование проекта: РОМ определяет стандартную структуру каталогов для Maven, что позволяет
  организовать проект сообразно с наилучшими практиками разработки ПО.

2. СТРУКТУРА POM:

- GroupId - идентификатор группы, который определяет уникальную группу, к которой принадлежит проект.
- ArtifactId - идентификатор артифакта, который определяет уникальный идентификатор проекта.
- Version - версия проекта, которая определяет текущую версию проекта.
- Dependencies - секция, в которой определяются все зависимости проекта.
- Build configuration - секция, в которой можно указать разные параметры сборки проекта, включая пла-
  гины, цели сборки и другое.

3. КАК РАБОТАТЬ С POM:

- Создание РОМ: Для начала работы с Maven нужно создать файл РОМ в корневом каталоге проекта. Это можно
  сделать вручную либо при помощи команды Maven: mvn archetype:generate.

- Добавление зависимостей: Зависимости можно добавить в раздел <dependencies> в файле POM, указав groupId,
  artifactId и version для каждой библиотеки.

- Конфигурирование проекта: В файле РОМ можно настроить разные параметры проекта, такие как JDK-версия,
  компиляция кода, стандартный каталог интеграции (встраивания), итп.

Пример раздела <dependencies> в файле РОМ, где указаны зависимости для проекта:

<dependencies>
    <!-- Залежність від бібліотеки JUnit для тестування -->
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.12</version>
        <scope>test</scope>
    </dependency>

    <!-- Залежність від бібліотеки Apache Commons для роботи з рядками -->
    <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-lang3</artifactId>
        <version>3.12.0</version>
    </dependency>

    <!-- Залежність від бібліотеки Google Guava для роботи з колекціями -->
    <dependency>
        <groupId>com.google.guava</groupId>
        <artifactId>guava</artifactId>
        <version>30.1-jre</version>
    </dependency>
</dependencies>

ЖИЗНЕННЫЙ ЦИКЛ MAVEN-ПРОЭКТА - это последовательность этапов или фаз, которые проходит проект во время
сборки, тестирования, развертывания и других операций. Основные этапы жизненного цикла мейвен проекта
следующие:

1. clean - удаляются все скомпилированные файлы с каталога target (место, в котором сохраняются готовые
           артефакты);

2. validate - проверка, вся ли информация доступна для сборки проекта;

3. compile - компилируются файлы с исходным кодом;

4. test - запускаются тесты;

5. package - упаковуются скомпилированные файлы (jar, war, итд архив);

6. verify - выполняются проверки для подтверждения готовности упакованного файла;

7. install - пакет помещается в локальный репозиторий. Теперь он может быть использован другими проектами
             как внешняя библиотека;

8. site - создается документация проекта;

9. deploy - собранный архив копируется в удаленный репозиторий;

Эти этапы могут быть вызваны как отдельно, так и в комбинации для выполнения определенных операций с
проектом. Например команда mvn clean install выполнит все этапы от clean до install, включая компиляцию
, тестирование и установку пакета.

*
======================================================================================================
3) GRADLE

Gradle – это система автоматизации сборки программного обеспечения, которая использует синтаксис Groovy
или Kotlin для описания зависимостей и задач проекта. Вот некоторые ключевые понятия и особенности
Gradle:

1. Build Script: Gradle использует скрипты сборки для описания структуры проекта и определения задач для
   сборки и работы с проектом.

2. Dependency Management: Gradle позволяет определять зависимости проекта, которые будут автоматически
   загружены и включены в проект. Это позволяет легко управлять библиотеками и плагинами.

3. Plugin System: Gradle имеет широкий набор плагинов, позволяющих выполнять различные задачи, такие как
   компиляция кода, тестирование, развертывание и т.д.

4. Task Customization: Вы можете создавать собственные задачи и настраивать их поведение с помощью скриптов
   Gradle.

5. Incremental Build: Gradle поддерживает инкрементальную сборку, позволяющую собирать только те части
   проекта, которые изменились с последней сборки, что ускоряет процесс сборки.

6. Multi-project Builds: Gradle позволяет управлять многими проектами в одном файле сборки, что позволяет
   совместно использовать коды и ресурсы между проектами.

7. IDE Integration: Gradle интегрируется с разными интегрированными средами разработки, такими как
   IntelliJ IDEA, Eclipse и другие, что упрощает разработку и делает рабочий процесс более удобным.

Общей практикой является создание файла build.gradle или build.gradle.kts в корневой папке проекта и
определение в нем конфигурации проекта и сборочных задач. Gradle автоматически загружает необходимые плагины
и зависимости проекта, чтобы упростить рабочий процесс.

Установка Gradle на локальной машине:
                                        https://docs.gradle.org/current/userguide/installation.html

Build script – это файл, содержащий инструкции для сборки и конфигурации вашего проекта. В контексте
Gradle это файл build.gradle или build.gradle.kts.

Основные составляющие build script:

1. Объявление плагинов: Плагины расширяют функциональность Gradle для определенных типов проектов
   (например, Java, Kotlin, Android). Они включаются ключевое слово plugins.

2. Конфигурация проекта: Устанавливаются основные свойства проекта, такие как его имя, версия,
   группа и т.д.

3. Репозитории: Определяют, откуда будут скачиваться зависимости проекта. Обычно это центральные
   репозитории,такие как Maven Central или JCenter.

4. Зависимости: Объявляются библиотеки, используемые в проекте. Gradle загружает эти библиотеки
   из определенных репозиториев.

5. Задачи (tasks): Описываются операции, которые можно выполнить с вашим проектом, например компиляция,
   тестирование, сборка JAR или WAR файла.

Структура build script может варьироваться в зависимости от потребностей вашего проекта. Однако общие
шаги включают объявление плагинов, конфигурацию проекта и добавление зависимостей.

Работая с build script, вы можете использовать Gradle для автоматизации многих задач в процессе
разработки вашего проекта, таких как сборка, тестирование, публикация артефактов и т.д. Эти задачи можно
запустить с командной строки с помощью команд Gradle или из интегрированной среды разработки (IDE).

В файле build.gradle для Gradle, зависимости определяются в разделе dependencies. Они указывают, какие
внешние библиотеки или модули нужны вашему проекту при сборе и выполнении.

build.gradle файл с использованием зависимостей junit, Apache Commons и Google Guava будет выглядеть
примерно так:

dependencies {
    // Залежність для JUnit
    testImplementation 'junit:junit:4.12'

    // Залежності для Apache Commons
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.commons:commons-math3:3.6.1'

    // Залежність для Google Guava
    implementation 'com.google.guava:guava:30.1-jre'
}

Жизненный цикл проекта в Gradle включает следующие этапы:

1) Инициализация проекта (Initialization): Создание нового проекта или загрузка существующего проекта.
   Этот этап может включать в себя настройки основных конфигурационных файлов Gradle.

2) Конфигурация (Configuration): Определение настроек проекта, включая зависимости, плагины, задачи,
   другие настройки и кастомизацию.

3) Сборка: Выполнение задач сборки проекта, таких как компиляция, тестирование, упаковка и другие. На
   этом этапе Gradle выполняет указанные в скрипте задачи для создания результирующего артефакта.

4) Тестирование: Выполнение тестов для проверки качества кода и определения соответствия функциональным
   требованиям. Gradle позволяет запускать различные типы тестов, такие как модульные, интеграционные и
   другие.

5) Развертывание (Deployment): Распространение или публикация собранного артефакта в репозиториях или на
   удаленных серверах. Этот этап может включать в себя такие действия, как копирование файлов на сервер,
   публикация артефактов в репозитории Maven или другие действия по развертыванию.

6) Мониторинг (Monitoring): Отслеживание состояния проекта при его разработке и выпуске. Этот этап может
   включать в себя анализ результатов тестирования, мониторинг производительности кода и другие метрики
   проекта.

7) Обновление (Update): Обновление зависимостей и других компонентов проекта до более поздних версий.
   Этот этап может производиться регулярно для обеспечения актуальности компонентов проекта.

8) Управление версиями (Version Management): управление версиями проекта и его компонентов. Этот этап
   включает в себя установку, увеличение или уменьшение версий, а также работу с ветвями и тегами в системе
   управления версиями.

Эти этапы представляют собой основные шаги, которые включаются в жизненный цикл проекта в Gradle, и они могут
варьироваться в зависимости от конкретных требований и особенностей проекта.

Пример простого скрипта сборки проекта с помощью Gradle:

// Задаємо назву проекту
project.name = 'MyProject'

// Встановлюємо версію проекту
version = '1.0'

// Використовуємо мову Java для компіляції
apply plugin: 'java'

// Залежності проекту
dependencies {
    // Залежність від JUnit для тестування
    testImplementation 'junit:junit:4.12'

    // Залежність від Apache Commons для додаткових утиліт
    implementation 'org.apache.commons:commons-lang3:3.9'

    // Залежність від Google Guava для додаткових функцій
    implementation 'com.google.guava:guava:28.2-jre'
}

// Задаємо каталог для вихідних файлів
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

// Конфігуруємо завдання збирання
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// Додаємо завдання для виконання тестів
test {
    useJUnitPlatform()
}

// Задаємо завдання за замовчуванням для збирання проекту
defaultTasks 'clean', 'build'

В этом примере:

1. Задается название проекта и его версия.
2. Используется язык Java для компиляции.
3. Определяются зависимости проекта, такие как JUnit для тестирования, Apache Commons для
   дополнительных утилит и Google Guava для дополнительных функций.
4. Устанавливаются каталоги для исходных файлов.
5. Конфигурируются опции компиляции, такие как кодирование файлов.
6. Добавляются задания для выполнения тестов.
7. Задается список задач по умолчанию для сбора проекта, таких как очистка (clean) и сборка (build).

Этот скрипт можно сохранить в файле с названием build.gradle в корневом каталоге проекта, после чего
запустить команду gradle build для сборки проекта.

*
======================================================================================================
4) MAVEN vs GRADLE

Оба инструмента Maven и Gradle являются мощными средствами для автоматизации сборки и управления
зависимостями проектов в среде разработки программного обеспечения. Выбор между ними зависит от
конкретных потребностей вашего проекта и ваших предпочтений. Ниже приведены некоторые преимущества и
недостатки каждого из инструментов:

                                        _-== MAVEN ==-_

Достоинства:

- Стабильность и распространенность: Maven – это очень распространенный инструмент с богатой экосистемой.
  Многие библиотеки, фреймворки и другие инструменты поддерживают Maven из коробки.

- Упрощенная конфигурация: Maven имеет простую структуру конфигурации, основанную на XML. Это делает его
  достаточно простым в использовании для стандартных проектов.

- Контроль версий: Maven использует централизованную систему управления зависимостями, что облегчает
  управление версиями и управление зависимостями.

Недостатки:

- Ограниченная гибкость: Maven имеет ограниченную гибкость по сравнению с Gradle, в особенности в сложных
  сценариях сборки.

- Проблемы со скоростью: В некоторых случаях Maven может оказаться медленнее по сравнению с Gradle,
  особенно для крупных проектов или проектов со сложными зависимостями.

                                          _-== GRADLE ==-_

Достоинства:

- Гибкость и простота: Gradle имеет гибкую DSL (язык описания данных), которая позволяет легко настраивать
  процесс сборки и автоматизировать сложные задачи.

- Скорость сборки: Gradle может быть быстрее по сравнению с Maven, особенно для больших проектов, благодаря
  использованию управления кэшированием и оптимизации.

- Совместимость с Maven: Gradle может использовать Maven-зависимости напрямую, что облегчает переход от одного
  инструмента к другому.

Недостатки:

- Сложность конфигурации: Различия в DSL могут сделать конфигурацию Gradle более сложной для понимания,
  особенно для новичков.

- Меньшая распространенность: Хотя Gradle все больше набирает популярность, Maven остается более распространенным
  инструментом с более старым наследственным фондом.

В общем, оба инструмента имеют свои преимущества и недостатки, и выбор между ними зависит от ваших потребностей,
опыта и предпочтений. Maven может быть лучшим выбором для простых и стандартных проектов, не требующих сложных
конфигураций. С другой стороны, Gradle может быть более подходящим для сложных и с большим количеством задач
проектов благодаря своей гибкости и возможностям настройки.

Лучшее понимание, какой из инструментов больше подходит для вашего проекта, можно получить только испытав их
оба на практике и увидев, какой из них наиболее соответствует вашим потребностям и требованиям проекта.

*
======================================================================================================
5) ДОПОЛНИТЕЛЬНЫЕ МАТЕРИАЛЫ

https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html

https://www.baeldung.com/maven

https://www.simplilearn.com/tutorials/maven-tutorial/introduction-to-maven

https://gradle.org/guides/

https://docs.gradle.org/current/userguide/dependency_management.html

https://www.jetbrains.com/help/idea/getting-started-with-gradle.html

https://stackify.com/gradle-vs-maven/#:~:text=Gradle%20and%20Maven%20fundamentally%20differ,%2C%20are%20the%20%E2%80%9Cworkhorses.%E2%80%9D

*
======================================================================================================