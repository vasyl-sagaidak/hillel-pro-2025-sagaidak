Урок 35 (Monday - 12.05.2025)
Тема: WEB-СЕРВИСЫ
======================================================================================================
Ключевые разделы:

1) ПОНЯТИЕ ВЕБ-СЕРВИСА
2) ТИПЫ ВЕБ-СЕРВИСОВ
3) ПОНЯТИЕ REST
4) SOAP
5) REST vs SOAP vs GraphQL
6) GraphQL
7) JAVA WEB SERVICES
8) ДОПОЛНИТЕЛЬНЫЕ МАТЕРИАЛЫ

======================================================================================================
1) ПОНЯТИЕ ВЕБ-СЕРВИСА

Веб-сервисы (web services) - это программные компоненты, обеспечивающие функциональность либо услуги
через сеть Интернет. Они позволяют различным программам и системам обмениваться данными и функциональ-
ностью без привязки к конкретным платформам или языкам программирования.

Основные аспекты веб-сервисов включают:

1. Протоколы коммуникации:
    * HTTP/HTTPS: Веб-сервисы используют стандартные протоколы передачи гипертекста для коммуникации
      между клиентами и серверами.
    * SOAP (Simple Object Access Protocol): Это протокол обмена структурированными сообщениями в формате
      ХМL. Обычно используется веб-сервисами, поддерживающими протокол SOAP.

2. Языки описания сервисов:
    * WDSL (Web Services Description Language): Определяет интерфейс веб-сервиса, его операции и входяшие/
      исходящие данные.
    Swagger/OpenAPI: Спецификации, которые позволяют описывать RESTful веб-сервисы.

3. Формат обмена данными:
    * XML ( eXtensible Markup Language): Используется для обмена структурированными данными в виде текста.
    * JSON (JavaScript Object Notation): Более легкий формат для обмена данными, особенно популярен в REST-
      ful веб-сервисах.
    * Protocol Buffers (protobuf): Разработанный компанией Google, protobuf является бинарным форматом об-
      мена данными, который эффективно использует простые байтовые последовательности. Он широко использу-
      ется для структурированной сериализации данных.

4. Способы коммуникации:
    * REST (Representational State Transfer): Архитектурный стиль для разработки масштабируемых веб-серви-
      сов, которые испоьлзуют стандартные HTTP методы.
    * SOAP: Использует разнообразные HTTP методы для вызова операций веб-сервиса.
    * GraphQL: Это альтернативный подход к созданию АРІ, в сравнении с традиционным REST API.

5. Безопасность: SSL/TLS:
    * Для шифрования данных, передаваемых между клиентом и сервером.
    * Аутентификация и авторизация: Обеспечение доступа к веб-сервисам только для авторизованных пользователей.

6. Способы передачи данных (Синхронная/асинхронная коммуникация):
    * Синхронные веб-сервисы отправляют ответ сразу, асинхронные эе могут отправить его позже.

Данные аспекты определяют структуру и способы взаимодействия между веб-сервисами, позволяя им эффективно
обмениваться данными и функциональностью через сеть Интернет.

*
======================================================================================================
2) ТИПЫ ВЕБ-СЕРВИСОВ

1. Сервисы RESTful (Representational State Transfer):

   * Стандартная архитектурная модель для взаимодействия между компонентами системы через сеть.
   * Использует HTTP протокол для передачи данных;
   * Использует ресурсы (ресурсы URL) и операции CRUD (созданиче, чтение, обновление, удаление).
   * Отлично подходит для построения легких и быстрых интерфейсов для взаимодействия с ресурсами на
     основе протокола HTTP. Идеально подходит для мобильных приложений и современных веб-приложений.
     REST часто используется для публичных API.

2. Сервисы SOAP (Simple Object Access Protocol):

    * Протокол обмена сообщениями, использующий XML для структурирования данных, и HTTP для их передачи.
    * Обеспечивает более высокий уровень безопасности в сравнении с REST.
    * Часто используется в корпоративных средах и веб-службах (на энтерпрайзе, на больших проектах).
    * Этот тип служит лучше в корпоративных средах, там, где нужна более высокая надежность, безопасность
      и поддержка транзакций. SOAP широко используется в бизнес-процессах где важна точность и надежность
      обмена данными.

3. Сервисы GraphQL:

    * Обеспечивают гибкий интерфейс для взаимодействия с данными, позволяя клиентам получать только те
      данные, которые им необходимы.
    * Используют один запрос к серверу для получения всей необходимой информации.
    * Подходят для современных веб и мобильных приложений, которые требуют эффективного обмена данными.
      GraphQL особенно полезен в случаях, когда клиентам нужна гибкость в выбранном формате и обьеме
      полученных данных.

4. Сервисы, построенные на микросервисной архитектуре:

    * Разбиение системы на небольшие независимые сервисы, которые могут функционировать и расширяться
      независимо друг от друга.
    * Данный подход эффективен для больших и сложных систем где разные части могут быть развиты,
      обновлены и масштабированы независимо. Микросервисы позволяют гибко внедрять изменения и масшта-
      бировать только конкретные сервисы по необходимости.

5. Сервисы построенные на архитектуре SOA (Service-Oriented Architecture):

    * Архитектурный подход, в котором функции системы представлены как независимые службы, которые могут
      взаимодействовать между собой.
    * Олично подходит для корпоративных систем, где разные бизнес-функции могут быть отделены в службы
      и взаимодействовать при помощи стандартизованных интерфейсов. SOA позволяет легче управлять
      комплексностью больших систем.

6. Serverless сервисы (безсерверные):

    * Способ разработки и развертывания программ, где разработчиками не нужно вручную управлять серверами.
    * Код выполняется в среде, которая автоматически масштабируется согласно с требованиями.
    * Подходит для проектов с небольшой либо непредсказуемой нагрузкой. "Безсерверные" сервисы автоматически
      масштабируют ресурсы по необходимости, что делает их эффективными для управления скачками рабочей
      нагрузки. Это может быть полезно для приложений, где важно минимизировать траты на административный
      учет.

Важно понимать, что веб-сервисы могут использовать разные технологии и подходы в зависимости от конкретных
требований и ограничений проекта.

*
======================================================================================================
3) ПОНЯТИЕ REST

REST (RE-presentational S-tate T-ransfer) является архитектурным стилем для разработки веб-приложений
и взаимодействия между компонентами системы в сети интернет. Этот подход был предложен Роем Филдингом
в его докторской дисертации "Архитектурные стили и дизайн сетевых программ" в 2000 году.

Основные принципы REST API:

1. Клиент-серверная архитектура (Client-Server Architecture):

    * Клиентская и серверная части развиваются независимо друг от друга, могут использовать разные тех-
      нологии, платформы, языки программирования, итп.

2. Многослойность (Layered):

    * Сервер может состоять из нескольких отдельных компонентов, которые работают вместе для обработки
      клиентских запросов. Эти компоненты являются невидимыми для пользователя.

3. Состояние системы не сохраняется (Statelessness):

    * Каждый запрос от клиента к серверу содержит всю необходимую информацию для понимания обработки
      запроса. Сервер не сохраняет никакой информации про состояние клиента между запросами.

4. Общий интерфейс (Uniform Interface):

    * Ресурс возвращает данные в стандартизированном формате, который является полным и полностью
      функциональным.

5. Кеширование (Cacheable):

    * Ответы от сервера должны кешироваться для улучшения скорости работы приложения.

6. Code on demand:

    * Ответы от сервера могут содержать код, если в этом есть необходимость.

Принципы REST позволяют создавать системы, которые являются простыми, масштабируемыми и легкими для
понимания. REST это очень популярный подход для разработки веб-сервисов, особенно в современной веб-
среде.

*
======================================================================================================
4) SOAP

SOAP (S-imple O-bject A-ccess P-rotocol) API - это протокол взаимодействия между программными системами,
которые основываются на обмене структурированными сообщениями в формате XML. SOAP API используется для
взаимодействия между разными программами, даже если они расположены на разных компьютерах либо в сети
Интернет.

================================
Основные характеристики SOAP API:
================================

1. Формат сообщений:

   * SOAP использует XML для обмена сообщениями. Это позволяет легко читать и понимать данные, а так-же
     упрощает их обработку компьютерными системами.

2. Структура сообщений:

    * Каждое SOAP сообщение содержит две основные части: заголовок (Header) и тело (Body). Заголовок
      содержит метаданные и другую служебную информацию, а тело содержит основные данные либо запрос.

3. WSDL (Web Services Description Language):

    * WDSL используется для описания интерфейсов веб-сервисов, которые используют SOAP. Это описание
      позволяет разработчикам находить, какие операции предоставляются сервисом, и какие данные они
      ожидают и возвращают.

4. Протокол независимый от платформы:

    * SOAP API может использоваться на любых платформах и в любых языках программирования, что позво-
      ляет поддерживать интероперабельность между разными системами.

5. Разные протоколы транспорта:

    * SOAP может использовать разные протоколы транспорта, такие как HTTP, SMTP, либо дополнительные
      протоколы для безопасности, такие как HTTPS. SOAP API используется для интеграции между
      различными системами, обмена данными между клиентом и сервером, и использования раличных опера-
      ций в распределенных системах. Особенно он полезен там, где нужно стандартизованное и надежное
      взаимодействие между веб-сервисами.

========================
Структура SOAP сообщений
========================

Пример SOAP сообщения:

<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap">
	<soap: Header>
		<!-- Заголовок сообщения (необязательно) -->
		<web: AuthHeader>
				<web: Username>john_doe</web:Username>
				<web: Password>secretpassword</web:Password>
		</web: AuthHeader>
	</soap: Header>
	<soap: Body>
		<!-- Тело сообщения -->
		<web:GetUserInfo>
				<web:UserID>12345</web:UserID>
		</web:GetUserInfo>
	</soap:Body>
</soap:Envelope>

Обьяснение:

soap:Envelope является корневым элементом, который оборачивает все остальные части сообщения.
soap:Header содержит заголовок сообщения, в данном случае, єлемент web:AuthHeader с информацией про
аутентификацию.
soap:Body содержит тело сообщения, которое используется для передачи конкретного запроса или данных.
В этом случае, элемент web:GetUserInfo с идентификатором пользователя **web:UserID**.

================================================
Понятие WSDL (Web Services Description Language)
================================================

WSDL, или язык описания веб-сервисов (Web Services Description Language) является стандартом описания
функциональности веб-сервисов и их доступных операций. Он определяет, то как будет происходить взаимо-
действие с веб-сервисом, предоставляя информации о доступных операциях, типах данных, формате сообщений
и адреса для доступа к службе. WSDL часто используется вместе с протоколом SOAP для создания веб-сервисов
на основании стандартов.

Основные аспекты WDSL включают:

1. Описание операций:

    * WSDL предоставляет четкие и структурированные описания операций, которые веб-служба
      может выполнять. Это включает в себя названия операций, входные и выходные параметры.

2. Описание типов данных:

    * Определение типов данных, используемых в операциях. Это включает структуры, списки
      и другие типы, которые могут использоваться для передачи данных.

3. Описание протоколов и адресов:

    * WSDL определяет протоколы для взаимодействия с веб-службой, такие как SOAP (Simple Object Access
      Protocol), и предоставляет информацию об адресах (URL) для доступа к веб-службе.

4. Структура документа WSDL:

    * WSDL представляет собой документ XML и имеет четкую структуру. Она содержит различные разделы,
      такие как операции, типы данных, протоколы и адреса.

5. Версионирование и контроль изменений:

    * WSDL поддерживает версионирование для определения различных версий веб-служб и контроля изменений
      в ее описании.

Пример элементов WSDL:

<definitions name="MyWebService" targetNamespace="http://some-url"
		xmlns="http://www.w3.org/ns/wsdl"
		xmlns: soap="http://www.w3.org/ns/wsdl/soap"
		xmlns: tns="http://example.org/webservice"
		xmlns: xsd="http://www.w3.org/2001/XMLSchema">

		<!-- Описание операции -->
		<operation name="GetUserInfo">
				<input message="tns:GetUserInfoInput" />
				<output message="tns:GetUserInfoOutput" />
		</operation>

		<!-- Описание типов данных -->
		<types>
				<schema targetNamespace="http://example.org/webservice">
						<!-- Опис структур та типів -->
				</schema>
		</types>

		<!-- Описание протоколов и адрес -->
		<binding name="MyWebServiceSOAPBinding" type="tns:MyWebService">
				<soap:binding style="document" transport="http://www.w3
				<operation name="GetUserInfo">
						<soap:operation soapAction="http://example.org/webser">
						<input>
								<soap:body use="literal"/>
						</input>
						<output>
								<soap:body use="literal"/>
						</output>
				</operation>
		</binding>

		<!-- Адреса для доступа к веб-службе -->
		<service name="MyWebService">
				<port name="MyWebServicePort" binding="tns:MyWebService">
						<soap:address location="http://example.org/webservice">
				</port>
		</service>
</definitions>

Объяснение:

* Определяется операция GetUserInfo с входящим и исходящим сообщением.
* Определяются типы данных с помощью XML Schema (xsd).
* Задается протокол SOAP для операции и адрес для доступа к веб-сервису.

WSDL предоставляет инструмент для описания веб-сервисов и реализации интерфейса между разными системами,
позволяя им эффективно общаться и обмениваться данными.

====================
Структура WSDL файла
====================

Структура файла Web Services Description Language (WSDL) определяет описание веб-сервиса и его
интерфейса. Файл WSDL является XML-документом, и его структура состоит из нескольких ключевых элементов,
подробно описывающих характеристики веб-сервиса.

Основные элементы WSDL:

1. definitions (определения): Корневой элемент/враппер, оборачивающий весь WSDL документ.
   * Определяет пространство имен и другие глобальные атрибуты.

<definitions
		name="MyWebService"
		targetNamespace="http://example.org/webservice"
		xmlns="http://www.w3.org/ns/wsdl"
		xmlns: soap="http://www.w3.org/ns/wsdl/soap"
		xmlns: tns="http://example.org/webservice"
		xmlns: xsd="http://www.w3.org/2001/XMLSchema">
<!-- Внутренние элементы definitions -->
</definitions>

2. types (типы):
   * Содержит описания типов данных с помощью XML Schema (XSD).
   * Определяет структуры данных, которые используются в сообщениях веб-сервиса.

<types>
		<schema targetNamespace="http://example.org/webservice">
		<!-- Описание типов данных -->
		</schema>
</types>

3. message (сообщение):
   * Определяет структуру сообщения, которое передается веб-сервисом.
   * Включает в себя определенные ранее типы данных.

<message name="GetUserInfoInput">
		<!-- Список элементов для входящего сообщения -->
</message>
<message name="GetUserInfoOutput">
		<!-- Список элементов для исходящего сообщения -->
</message>

4. portType (тип порта):
   * Определяет набор операций и их входы/выходы.
   * Операции связаны с сообщениями, определенными в разделе message.

<portType name="MyWebServicePortType">
		<operation name="GetUserInfo">
				<input message="tns:GetUserInfoInput"/>
				<output message="tns:GetUserInfoOutput"/>
		</operation>
		<!-- Дополнительные операции -->
</portType>

5. binding (связывание):
   * Определяет протокол и формат сообщений для конкретного типа порта.
   * Связывает операции с портом и определяет детали взаимодействия.

<binding name="MyWebServiceSOAPBinding" type="tns:MyWebService">
		<soap:binding style="document" transport="http://some-url">
		<operation name="GetUserInfo">
				<soap:operation soapAction="http://example.org/webservice">
				<input>
						<soap:body use="literal"/>
				</input>
				<output>
						<soap:body use="literal"/>
				</output>
		</operation>
		<!-- Дополнительные операции и детали связывания -->
</binding>

6. service (сервис):
   * Определяет конкретный сервис, который предоставляется и его адреса для доступа.
   * Включает связь для каждого порта.

<service name="MyWebService">
		<port name="MyWebServicePort" binding="tns:MyWebService">
				<soap:address location="http://example.org/webservice">
		</port>
		<!-- Дополнительные порты и их адреса -->
</service>

Это общий обзор структуры файла WSDL. Каждый из этих элементов содержит дополнительные элементы
и атрибуты, которые более подробно определяют параметры и характеристики веб-сервиса. WSDL
предоставляет подробное описание веб-сервиса, помогающего реализовать взаимодействие между разными
системами.

==============================
Преимущества и недостатки SOAP
==============================

Преимущества SOAP:
-------------------

1. Расширяемость:

    * SOAP поддерживает разные стандарты, такие как WS-Security для обеспечения безопасности,
      WS-ReliableMessaging для надежности доставки и другие. Это позволяет расширять функциональность
      и обеспечивать высокий уровень безопасности.

2. Независимость от языка:

    * Сообщения SOAP могут быть отправлены и получены на любой платформе и в любом языке программирования,
      поскольку они построены на основе XML-документов.

3. Стандартизация:

    * SOAP является международным стандартом, принятым организацией W3C. Это позволяет обеспечить
      взаимодействие между разными системами и платформами согласно четко определенным правилам.

4. Возможности валидации и описания сервисов:

    * С помощью Web Services Description Language (WSDL) можно описать функции и структуру веб-сервиса,
      а с помощью XML Schema можно валидировать структуру SOAP-сообщений.

Недостатки SOAP:
----------------

1. Трудность в понимании:

    * SOAP использует формат XML для представления данных, что делает его трудным для понимания и отладки.
      Это может привести к большим затратам времени и ресурсов при разработке и поддержке.

2. Большой объем сообщений:

    * XML-сообщения, используемые в SOAP, могут быть большими и занимать много пропускной способности сети,
      что может быть нецелесообразным при обмене большим количеством данных.

3. Больше затрат на обработку:

   * Обработка SOAP-сообщений может потребовать больше ресурсов, особенно по сравнению с легковесными
     альтернативами, такими как REST.

4. Меньшая скорость:

    * По сравнению с другими протоколами, такими как REST, SOAP может быть менее эффективным в использовании
      пропускной способности и скорости передачи данных по сети.

Выбирая между SOAP и другими протоколами необходимо учитывать конкретные потребности своего проекта и
оценить преимущества и недостатки для принятия правильного решения.

Гарантии надежности
-------------------

Надежность в SOAP (Simple Object Access Protocol) касается возможности веб-сервиса справиться с ошибками,
потерей сообщений или неудачными вызовами. Обеспечение надежности важно для бизнес-систем, где важно иметь
уверенность в том, что данные будут доставлены и обработаны правильно.

Основные аспекты надежности в SOAP включают:

1. Механизмы подтверждения получения (Acknowledgement):

    * SOAP может включать механизмы подтверждения получения, позволяющие веб-сервису отправить сообщение,
      получить подтверждение о его получении от клиента, и при необходимости повторить отправку в случае
      потери.

2. Механизмы повторной отправки:

    * Некоторые реализации SOAP могут включать встроенные механизмы повторной отправки для автоматического
      решения временных проблем доставки, таких как временная недоступность веб-службы или перебои в сети.

3. Хранение и восстановление состояния (Persistence and State Recovery):

    * Использование механизмов для хранения состояния случайных сеансов или восстановления состояния в
      случае отказа. Это может включать хранение состояния сеанса, используя базы данных или другие
      механизмы.

4. Механизмы проверки целостности данных (Data Integrity Checks):

    * Включение проверок целостности данных для обнаружения и устранения любых ошибок в сообщениях.

5. Управление сеансами и транзакциями:

    * Использование механизмов управления сеансами и транзакциями для обеспечения консистентности
      данных и корректности выполнения операций в веб-сервисах.

6. Механизмы обработки ошибок:

    * Включение эффективных механизмов обработки ошибок для корректной обработки непредвиденных ситуаций
      и отправки информации об ошибках клиенту.

Надежность в SOAP является важной задачей при разработке веб-сервисов, поскольку она гарантирует
корректное взаимодействие систем и возможность эффективного решения возможных проблем.

============================
Сложности использования SOAP
============================

Ключевые аспекты использования SOAP, которые могут быть признаны как сложности использования:

1.Сериализация и десериализация:

    * SOAP использует XML для представления данных, что может приводить к большому объему данных и быть
      менее эффективным для передачи данных. Процесс сериализации (преобразование объектов в XML) и
      десериализации (преобразование XML обратно в объекты) может быть затратным по ресурсам.

2.Сложность чтения и понимания:

    * Чтение SOAP-сообщений вручную может быть затруднено из-за его структурированности XML и объема
      данных.

3.Высокая стоимость разработки:

    * Имплементация и поддержка SOAP-веб-сервисов может потребовать значительных усилий и ресурсов
      из-за большого количества правил и стандартов.

4.Сериализация для разных языков программирования:

    * Использование SOAP в больших и разнообразных системах может потребовать реализации механизмов
      сериализации и десериализации для разных языков программирования.

5.Высокое потребление ресурсов:

    * Обработка XML и взаимодействие с SOAP могут потребовать много ресурсов на стороне как сервера,
      так и клиента.

6.Не эффективен для простых сценариев:

    * SOAP несет в себе определенный оверхед для простых сценариев, потому что требует больше кода
      для реализации и больше ресурсов по сравнению с такими альтернативами, как REST.

7.Сложности в реализации мер безопасности:

    * Хотя SOAP имеет механизмы безопасности, их реализация может быть сложной и требует от
      разработчиков глубоких знаний в сфере безопасности.

8.Поддержка только XML:

    * SOAP позволяет обмениваться данными только в формате XML, что может быть неэффективным или
      не очень удобным для систем, использующих другие форматы данных.

Несмотря на эти сложности, SOAP является мощным и расширяемым протоколом, особенно в сценариях, где
важна стандартизация и безопасность. Избрание между SOAP и другими протоколами, такими как REST,
обычно зависит от конкретных потребностей проекта и его контекста.

*
======================================================================================================
5) REST vs SOAP vs GraphQL

REST (Representational State Transfer), SOAP (Simple Object Access Protocol) и GraphQL – это три разных
подхода к созданию веб-сервисов, каждый из которых имеет свои плюсы и минусы.

Давайте сравним их:

=====
REST:
=====

Плюсы:
------

    * Простота: REST очень проста в реализации и понимании.

    * Использует стандартные методы HTTP (GET, POST, PUT, DELETE), что делает его легким в понимании
      и использовании.

    * Масштабируемость: Легко масштабируется, поскольку каждый ресурс (например, эндпоинт) независим
      и может быть масштабирован отдельно.

    * Поддержка кэширования: REST поддерживает кэширование, что позволяет улучшить производительность
      и уменьшить нагрузку на сервер.

Минусы:
-------

    * Излишняя передача данных: иногда REST передает лишние данные, поскольку он возвращает всю информацию
      о ресурсе, даже если клиент использует только часть этих данных.

    * Недостаточная гибкость: REST не всегда предоставляет необходимую гибкость для требований, которые
      могут изменяться со временем.

=====
SOAP:
=====

Плюсы:
------

    * Стандартизация: SOAP базируется на стандартах, что делает его идеальным для крупных предприятий со
      сложными системами.

    * Безопасность: SOAP имеет встроенные механизмы безопасности, позволяющие обеспечить конфиденциальность
      и целостность данных.

Минусы:
-------

    * Сложность: SOAP является комплексным и сложным в использовании по сравнению с другими протоколами.

    * Больше ресурсов: SOAP требует больше ресурсов для обработки, что может привести к увеличению
      нагрузки на сеть и снижению производительности.

========
GraphQL:
========

Плюсы:
------

    * Гибкость:GraphQL позволяет клиенту запрашивать только те данные, которые ему нужны, уменьшая объем
      передаваемых данных.

    * Единый запрос: Клиент может выполнить единственный запрос, чтобы получить всю необходимую информацию,
      что уменьшает количество запросов к серверу.

Минусы:
-------

    * Сложность реализации: GraphQL может быть сложной для реализации, особенно для небольших проектов или
      команд с ограниченными ресурсами.

    * Недостаточная стандартизация безопасности: По сравнению с SOAP GraphQL не имеет таких жестких
      встроенных механизмов безопасности, и здесь важно самостоятельно учитывать аспекты безопасности.

Выбирая меж REST, SOAP и GraphQL, нужно учесть конкретные требования проекта, уровень трудности, потребности
в гибкости и стандартизации.

*
======================================================================================================
6) GraphQL

GraphQL - язык запросов и среда выполнения запросов для получения данных из связанных источников через один
единственный API. Он был разработан компанией Facebook и используется для построения более гибких и
эффективных API по сравнению с традиционными REST API.

Основные особенности GraphQL:

1. Гибкость запросов: вместо получения больших наборов данных в формате, определенном сервером, клиент может
   точно указать, какие поля и связи его интересуют. Это позволяет уменьшить избыточные данные и сделать
   запросы более эффективными.

2. Связи между данными: GraphQL позволяет описать связи между разными типами данных, что позволяет обращаться
   к нескольким типам данных в одном запросе и получать нужные данные.

3. Интроспекция: GraphQL предоставляет возможность обращаться к "интроспекционному запросу", чтобы узнать
   структуру и возможности API, что делает разработку и документирование API более простой.

4. Скалярные типы данных: GraphQL предоставляет базовые скалярные типы данных, такие как строки, числа,
   булевые значения и т.д., но также позволяет создавать собственные скалярные типы данных.

5. Декларативность: Запросы GraphQL описываются декларативно, указывая, какие поля и связи нужно получить,
   что делает запросы более четкими и понятными.

6. GraphQL является открытым стандартом и его спецификация доступна для использования всеми. Он стал
   популярным в области разработки API из-за своей гибкости и возможности взаимодействия с данными на
   основе потребностей клиента, что помогает улучшить производительность и эффективность работы с данными.

                                                Cтруктура GraphQL
                                             /           |          \
                                         Queries      Schema      Resolvers

В GraphQL есть два основных типа запросов: запросы на получение данных (queries) и запросы на изменение
данных (mutations) Давайте рассмотрим каждый тип запроса более подробно:

Queries (Запросы на получение данных):
-------------------------------------

Запросы на получение данных используются для получения информации с сервера. Клиент специфицирует,
какие поля нужно получить и сервер возвращает данные в указанном формате.

Пример запроса на получение имени и электронного адреса пользователя в GraphQL:

query {
		user(id: 123) {
				name
				email
		}
}

Mutations (Запросы на изменение данных):
----------------------------------------

Запросы на изменение данных используются для выполнения действий, изменяющих данные на сервере.
Это может быть создание, обновление или удаление данных.

mutation {
		createUser(name: "John Doe", email: "john@example.com") {
				id
				name
				email
		}
}

Оба типа запросов могут содержать параметры передачи дополнительной информации к серверу.
Например, в примерах выше параметр id передается серверу для определения конкретного пользователя.
GraphQL предоставляет возможность клиентам обращаться ко многим разным полям и связям одним запросом,
что позволяет уменьшить количество запросов и предоставлять более точную информацию,
в которой нуждается клиент. Также у GraphQL существует ряд дополнительных возможностей для работы с
запросами.

Batch requests
--------------

Batching запросов в GraphQL – это подход, когда клиент объединяет несколько запросов в одном HTTP-запросе
к серверу GraphQL. Это может помочь уменьшить количество обращений к серверу и улучшить производительность.
Для выполнения batch requests в GraphQL, клиент должен использовать операцию batch или использовать один
HTTP-запрос с несколькими операциями внутрь.

{
    empireHero: hero(episode: EMPIRE) {
      name
    }
    jediHero: hero(episode: JEDI) {
      name
    }
}

{
    "data": {
        "empireHero": {
        "name": "Luke Skywalker"
        }
        "jediHero": {
        "name": "R2-D2"
        }
    }
}

В этом примере в одном запросе производится запрос на получение данных empireHero и jediHero. Использование
batch-запросов (запросов с группированием нескольких операций в один HTTP-запрос) в GraphQL имеет несколько
преимуществ:

1. Уменьшение количества обращений HTTP:

    * Один batch-запрос может содержать несколько операций, что позволяет осуществлять несколько запросов
      одновременно в одном запросе. Это уменьшает количество обращений к серверу и помогает снизить задержки
      по сети.

2. Уменьшение оверхеда сети:

    * HTTP-запросы имеют определенный накладной оверхед, и batch-запросы помогают уменьшить этот оверхед,
      осуществляя несколько запросов в одном.

3. Комбинация запросов:

    * С помощью batch-запросов клиент может объединить различные операции, такие как получение данных и
      изменение данных в одном запросе. Это позволяет сохранить время и ресурсы для обработки запросов и
      ответов.

4. Параллельное исполнение:

    * Хотя запросы в одном batch-запросе выполняются последовательно, сервер может выполнять их параллельно
      или оптимизировано. Это может улучшить производительность и быстроту ответа.

5. Увеличенная производительность:

    * Благодаря уменьшению количества обращений и оверхеду сети, с помощью batch-запросов можно увеличить
      производительность приложения и улучшить его реакцию на взаимодействие с сервером.

6. Не всегда использование batch-запросов целесообразно. Они подходят для случаев, когда клиенту необходимо
   совершить несколько операций одновременно или когда можно объединить различные запросы для уменьшения
   нагрузки на сервер.

   // см. конспект....
*
======================================================================================================
7) JAVA WEB SERVICES



*
======================================================================================================
8) ДОПОЛНИТЕЛЬНЫЕ МАТЕРИАЛЫ


SOAP:
https://www.w3.org/TR/soap/

SOAP:
https://www.w3.org/TR/2000/NOTE-SOAP-20000508/

GraphQL:
https://graphql.org/learn/

REST:
https://restfulapi.net/

REST:
https://ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm

Web Services:
https://docs.oracle.com/cd/E16439_01/doc.1013/e13982/overview.htm

*
======================================================================================================