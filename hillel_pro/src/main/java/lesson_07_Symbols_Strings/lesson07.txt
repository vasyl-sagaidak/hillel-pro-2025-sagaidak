Урок 07 (Понедельник - 13.01.2025)
Тема: Символы. Строки.
======================================================================================================
Ключевые разделы:

1) Символы. Кодировка.
2) Строки в Java
3) Иммутабельность.
4) Класс String. Манипуляции со строками.
5) Сравнение строк.
6) String Pool
7) Классы StringBuffer, StringBuilder
8) Класс StringJoiner
9) Регулярные выражения RegEx

======================================================================================================
1) CИМВОЛЫ. КОДИРОВКА.

Символы в Java представлены примитивным типом char, каждый из символов которого является
символом Unicode представленным в 16-ричной системе, имеет размер в 2 байта. Диапазон значений от 0,
до "\ffff" (либо 65535 включительно).

Кодировка Unicode занимается стандартизацией всех существующих символов на планете. Она является расши-
рением кодировок UTF-8 и UTF-16, которые в свою очередь основаны на старом 8-битном расширенном стандарте
ASCII code (American Standard Code for Information Interchange).

UTF 8 - стандарт кодировки, превращающий номера таблицы Юникод в бинарные коды с импользованием изменяемого
количества бит: 8, 16, 24, 32.
UTF 16 - стандарт кодировки, превращающий номера таблицы Юникод в бинарные коды с импользованием изменяемого
количества бит: 16 или 32 бит.
Коды UTF-8 и UTF-16 используют разные алгоритмы набора символов.

*
======================================================================================================
2) СТРОКИ В JAVA.

String является обьектом и ссылочным типом данных. Используется для хранения строк текста.

 - их можно создавать через конструктор, в таком случае в Хипе будет создан новый обьект.

 - можно как примитивы, явным обьявлением после оператора присвоения, тогда этот обьект стринги попадает в пул
 строк и при повторном обьявлении такого значения берется обьект из пула и присваивается переменной.

 - можно осуществлять конкатинацию стрингов через метод .concat() либо через оператор "+".

*
======================================================================================================
3) ИММУТАБЕЛЬНОСТЬ

Класс String является иммутабельным, такой обьект после создания не может быть изменен.

Immutable класс достигается следующим способом:
- сам класс делается final;
- инициализация происходит только через конструктор при создании.
- НЕ должно присутствовать методов сеттеров.

Для чего нужны иммутабельные обьекты?

Безопасность: параметры зачастую предоставляются в виде String в сетевых подключениях, URL-адресах
подключения к базам данных, именах пользователей/паролях итп. Если бы это было изменяемым, эти пара-
метры можно было бы легко изменить.

Синхронизация и concurrency: создание немутабельных String-ов автоматически делает их потокобезопасными,
тем самым исключая проблемы синхронизации.

Кеширование: когда компилятор получает ваши обьекты String, он видит, что если два обьекта имеют одинаковые
значения (а = "test" i b = "test") то в памяти сохраняется только один обьект.

Загрузка классов: String используются как аргуметны для загрузки классов. Если их изменить, это может привести
к загрузке неправильного класса (поскольку обьекты изменяются, их состояние так же изменяется).

*
======================================================================================================
4) КЛАСС STRING. МАНИПУЛЯЦИИ СО СТРОКАМИ.

Стринга является имммутабельным типом, под капотом у нее финальный массив байт. Это значит что созданный
однажды обьект стринги неизменяем, и при манипуляциях со строками (изменением/конкатинацией)
создаются новые обьекты.

В Хипе существует механизм оптимизации для строк под названием String Pool куда записывается строка после
ее декларирования, и если в будущем мы обьявляем переменную со значением строки (словом) которое уже есть
в пуле, то ссылка привязывается к существующему зачению. Таким образом экономится память.

*
======================================================================================================
5) СРАВНЕНИЕ СТРОК.
"==" - сравнивает ссылки на обьект (место в памяти).
.equals() - сравнивает обьекты по их содержанию.

// Разные переменные ссылаются на разные обьекты в памяти
String s1 = new String("Hello");
String s2 = new String("Hello");

System.out.println(s1 == s2); // == сравнивает ссылки на место в памяти, будет false, места разные, т.к обьекты разные
System.out.println(s1.equals(s2)); //Дефолтный иквалс сравнивает обьекты по содержанию. будет true, содержание идентично.

//Здесь у нас две переменных ссылаются на один обьект в StringPool
String str1 = "Top.java";
String str2 = "Top.java";

System.out.println(str1 == str2); //Результатом будет true, поскольку ссылки ведут к одной ячейке в памяти.
System.out.println(str1.equals(str2); //Результатом будет true, т.к. это один и тот же обьект.

*
======================================================================================================
6) STRING POOL.

StringPool это механизм оптимизации памяти, который находится в области памяти Хип. По умолчанию все строки
кроме созданных через явный вызов конструктора класса String попадают в StringPool.

Метод .intern() принудительным образом помещает обьект в StringPool.

Например:

String a = "hi"; // обьект в пуле
String b = new String("hi"); // новый отдельный обьект
b = b.intern(); // после вызова метода интерн обе переменные будут ссылаться на один обьект в пуле.

*
======================================================================================================
7) КЛАССЫ STRINGBUFFER, STRINGBUILDER.

Классы StringBuilder и StringBuffer являются мутабельными, используются для конкатинации строк
и сохранение памяти. Разница между ними в том, что стринг буфер используется в многопоточности,
а стринг билдер просто для конкатинации.

*
======================================================================================================
8) КЛАСС STRINGJOINER.

Существует метод класса java.lang.String под названием .join(). Он позволяет нам произвести конкатинацию
строк вставляя какой-то разделитель на наше усмотрение. Например:

System.out.println(String.join(", ", "organge", "apple", "banana"));
Output: orange, apple, banana


Класс StringJoiner позволяет совмещать строки как и с помощью метода join(), но в случае его использования
нам доступно еще несколько дополнительных методов данного класса.

Используется для построения последовательности символов, разделенных разделителем и необязательно начиная
с предоставленного префикса и заканчивая предоставленным суффиксом.

StringJoiner sj = new StringJoiner(", ");
sj.add("orange");
sj.add("apple");
sj.add("banana");

System.out.println(sj);
Output: orange, apple, banana

*
======================================================================================================
9) REGULAR EXPRESSIONS.

Регулярные выражения (Regular Expressions, RegEx) используются для определения строковых шаблонов,
которые можно использовать для поиска, обработки и редактирования текста.

Класс Pattern используется для определения шаблонов.
Класс Matcher используется для выполнения операций сопоставления текста с использованием шаблонов.
Класс PatternSyntaxException используется для указания синтаксичной ошибки в шаблоне регулярного выражения.
Интерфейс MatchResult используется для предоставления результата операции сопоставления.

*
======================================================================================================
