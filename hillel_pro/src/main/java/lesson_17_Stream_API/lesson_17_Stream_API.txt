Урок 17 (Понедельник - 24.02.2025)
Тема: Stream API
======================================================================================================
Ключевые разделы:

1) ВВЕДЕНИЕ В STREAM API
2) СПОСОБЫ СОЗДАНИЯ СТРИМА
3) ОПЕРАТОРЫ СТРИМА
4) ДОПОЛНИТЕЛЬНЫЕ МАТЕРИАЛЫ

======================================================================================================
1) ВВЕДЕНИЕ В STREAM API

Java Stream API – это мощный инструмент для работы с коллекциями данных в языке программирования Java.
Он предоставляет декларативный способ выполнения операций над данными, такими как фильтрация, отображение,
сворачивание и другие. Stream API упрощает и оптимизирует обработку данных, делая код более эффективным
и понятным.

Основные концепции

1. Поток (Stream) - представляет последовательность элементов, которую можно прорабатывать. Потоки не хранят данные,
а только операции, которые необходимо выполнить.

2. Операции над потоками:
- Промежуточные операции: Выполняют промежуточную обработку данных, такую как фильтрация, отображение, сортировка.
- Терминальные операции: Завершают стрим и выполняют остаточные расчеты, такие как сворачивание, подсчет, сбор.

3. Ленивость вычислений: Стримы позволяют выполнять операции только тогда, когда они фактически необходимы,
что делает вычисления более эффективными.

Преимущества стримов:
- Декларативный подход: Код на стримах выглядит декларативно, что облегчает чтение и понимание.
- Оптимизация вычислений: Stream API придает ленивость вычислений, что позволяет выполнять только
  необходимые операции.
- Поддержка параллельного выполнения: Некоторые операции могут быть автоматически выполнены параллельно,
  улучшая производительность.

Заключение:
Java Stream API является мощным инструментом для обработки данных в языке программирования Java. Использование
стримов позволяет реализовать функциональный подход к операциям над данными, что упрощает разработку и улучшает
эффективность кода. Операции на стримах делают обработку данных более удобной и гибкой.

*
======================================================================================================
2) СПОСОБЫ СОЗДАНИЯ СТРИМА

Стримы в Java являются мощным средством для обработки и операций над коллекциями данных. Давайте рассмотрим
различные методы создания стримов, придающих гибкость и удобство в работе со стримами.

1. ИЗ КОЛЛЕКЦИИ. Сдержку можно легко создать из существующей коллекции, используя метод stream().
List<String> fruits = Arrays.asList("apple", "orange", "banana", "grape");

        // Создание стрима из коллекции
        Stream<String> fruitStream = fruits.stream();

        // Использование стрима
        fruitStream.forEach(System.out::println);

2. ИЗ ЗНАЧЕНИЙ. Используя метод Stream.of(), можно быстро создать стрим из заданных значений.
        // Создание стрима из значений
        Stream<String> fruitStream = Stream.of("apple", "orange", "banana", "grape");

        // Использование стрима
        fruitStream.forEach(System.out::println);

3. ИЗ СГЕНЕРИРОВАННЫХ ЗНАЧЕНИЙ. Метод Stream.generate() позволяет создавать стрим из сгенерированных значений.
        // Создание стрима из сгенерированных значений
        Stream<Integer> numberStream = Stream.generate(() -> (int) (Math.random() * 100));

        // Использование стрима
        numberStream.limit(5).forEach(System.out::println);

4. ИЗ ИТЕРАТОРА. Если у вас есть итератор, вы можете использовать метод Stream.iterate() для создания стрима.
Iterable<String> iterableFruits = Arrays.asList("apple", "orange", "banana", "grape");
        Iterator<String> fruitIterator = iterableFruits.iterator();

        // Создание стрима из итератора
        Stream<String> fruitStream = Stream.iterate(fruitIterator.next(), f -> fruitIterator.hasNext(), f -> fruitIterator.next());

        // Использование стрима
        fruitStream.forEach(System.out::println);

5. ИЗ СТРОКИ. Разбив строку на слова, можно получить стрим слов с помощью метода Stream.of().
String str = "This is a sample string";

        // Создание стрима из строки
        Stream<String> wordStream = Stream.of(str.split("\\s+"));

        // Использование стрима
        wordStream.forEach(System.out::println);

6. ПУСТОЙ СТРИМ. Иногда вам может понадобиться пустой стрим, который можно создать с помощью метода Stream.empty().
        // Создание пустого стрима
        Stream<String> emptyStream = Stream.empty();

        // Использование стрима
        emptyStream.forEach(System.out::println);

Эти методы предоставляют разнообразные способы создания стримов в Java, учитывая разные источники данных.
Выбирайте тот, который лучше всего соответствует вашему конкретному случаю использования, чтобы сделать ваш
код более понятным и эффективным.

*
======================================================================================================
3) ОПЕРАТОРЫ СТРИМА

Операторы стрим Java предоставляют много возможностей для обработки и манипулирования данными в коллекциях.
Они делятся на две категории: промежуточные и терминальные операции.

Промежуточные операции:
1. filter(Predicate<T> predicate): отбор элементов по определенному условию.
2. map(Function<T, R> mapper): Трансформация элементов с помощью заданной функции.
3. flatMap(Function<T, Stream<R>> mapper): Развертывание вложенных стримов в одномерный стрим.
4. distinct(): Удаление дубликатов элементов в стриме.
5. sorted(): Сортировка элементов в стриме.

Терминальные операции:
1. forEach(Consumer<T> action): Применение действия к каждому элементу стрима.
2. collect(Collector<T, A, R> collector): Сбор элементов стрима с помощью заданного коллектора.
3. count(): Подсчет количества частей в стриме.
4. anyMatch(Predicate<T> predicate): Проверка, удовлетворяет ли хотя бы один элемент стрима определенному условию.
5. allMatch(Predicate<T> predicate): Проверьте, все ли элементы стрима удовлетворяют определенному условию.
6. noneMatch(Predicate<T> predicate): Проверка, не удовлетворяет ли какой-либо элемент стрима определенному условию.
7. findAny(): Возвращает любой элемент стрима.
8. findFirst(): Возвращает первый элемент стрима.
9. reduce(BinaryOperator<T> accumulator): Свертывание элементов стрима с помощью заданного оператора.
10. min(Comparator<T> comparator): Нахождение минимального элемента стрима с помощью компаратора.
11. max(Comparator<T> comparator): Нахождение максимального элемента стрима с помощью компаратора.

*
======================================================================================================
4) ДОПОЛНИТЕЛЬНЫЕ МАТЕРИАЛЫ

https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html

https://www.baeldung.com/java-8-streams

https://satishkathiriya99.medium.com/java-stream-api-cheatsheet-4e8c10d799dc

https://javaconceptoftheday.com/java-8-streams-beginners-guide/

*
======================================================================================================