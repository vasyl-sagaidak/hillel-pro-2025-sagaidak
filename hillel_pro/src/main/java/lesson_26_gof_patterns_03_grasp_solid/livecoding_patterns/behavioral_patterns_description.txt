=========================================================================================
                            ПОВЕДЕНЧЕСКИЕ ПАТТЕРНЫ
                          (GOF - BEHAVIORAL PATTERNS)
=========================================================================================

CHAIN OF RESPONSIBILITY (ЦЕПОЧКА ОБЯЗАННОСТЕЙ):
        -> Избегает связывания отправителя запроса с его получателем, давая возможность
           обработать запрос более чем одному обьекту. Связывает обьекты получатели и
           передает запрос по цепочке пока обьект не обработает его.

COMMAND (КОММАНДА):
           Паттерн, превращающий запросы в обьекты, позволяя передавать их как аргументы
           во время вызова методов. Ставить запросы в очередь, логировать их, а так-же
           поддерживать отмену операций.

        -> Инкапсулирует запрос в виде обьекта, позволяя передавать их клиентам в качестве
           параметров, ставить в очеред, логировать, а также поддерживает отмену операций.

INTERPRETER (ИНТЕРПРЕТАТОР):
        -> Получая формальный язык, определяет представление его грамматики и интерпретатор,
           использующий это представление для обработки выражений языка.

ITERATOR (ИТЕРАТОР):
        -> Предоставляет способ последовательного доступа к элементам множества, независимо
           от его внутреннего устройства.

MEDIATOR (ПОСРЕДНИК):
           Паттерн, позволяющий уменьшить(ослабить) связанность множества классов между
           собой благодаря перемещению этих связей в один класс-посредник.

        -> Определяет обьект, инкапсулирующий способ взаимодействия обьектов. Обеспечивает
           слабую связь, избавляя обьекты от необходимости прямо ссылать друг на друга и
           дает возможность независимо изменять их взаимодействие.

MEMENTO (ХРАНИТЕЛЬ):
           Паттерн, позволяющий делать "снимки" состояния обьектов не раскрывая
           подробностей их реализации.
           Потом, можно использовать эти "снимки" что бы вернуться (откатиться) к
           предыдущему состоянию обьекта. Своего рода аналог CTRL + Z, только с
           состоянием обьекта в JAVA.

        -> Не нарушая инкапсуляцию, определяет и сохраняет внутреннее состояние обьекта
           и позволяет позже восстановить обьект в єтом состоянии.

OBSERVER (НАБЛЮДАТЕЛЬ):
           Паттерн, создающий механизм "подписки", позволяющий одним обьектам
           следить и реагировать на события происходящие в других обьектах.

        -> Определяет зависимость "один ко многим" между обьектами так, что когда один
           обьект меняет свое состояние, все зависимые обьекты оповещаются и обновляются
           автоматически.

STATE (СОСТОЯНИЕ):
           Паттерн, позволяющий обьектам изменять поведение в зависимости от своего
           состояния. Снаружи (вне имплементации) возникает впечатление, что сменился
           класс обьекта.

        -> Позволяет обьекту изменять свое поведение в зависимости от внутреннего состояния.

STRATEGY:
           Паттерн, определяющий семейство подобных алгоритмов и помещает каждый из
           них в свой класс, после чего, алгоритмы можно взаимозаменять непосредственно во
           время выполнения программы.

        -> Определяет группу алгоритмов, инкапсулирует их и делает взаимо-заменяемыми.
           Позволяет изменять алгоритм независимо от клиентов, его использующих.

TEMPLATE METHOD (ШАБЛОННЫЙ МЕТОД):
           Паттерн, который определяет шаблон поведения (скелет) алгоритма,
           перекладывая ответственность за некоторые из шагов в ходе его выполнения на
           подклассы. Данный паттерн позволяет подклассам переопределять шаги (ход) алгоритма,
           не изменяя его общей структуры.

        -> Определяет алгоритм, некоторые этапы которого делегируются подклассам. Позволяет
           подклассам переопределить эти этапы, не меняя структуру алгоритма.

VISITOR (ПОСЕТИТЕЛЬ):
           Паттерн, позволяющий создавать новые операции, не изменяя текущие
           методы классов обьектов, над которыми могут выполняться операции.

        -> Представляет собой операцию, которая будет выполнена над обьектами группы классов.
           Дает возможность определить новую операцию без изменения кода классов, над которыми
           эта операция производится.

=========================================================================================