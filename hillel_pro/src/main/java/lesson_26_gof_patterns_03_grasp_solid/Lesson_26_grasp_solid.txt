Урок 26 (ЧЕТВЕРГ - 03.04.2025)
Тема: G.R.A.S.P. patterns & S.O.L.I.D. principles
======================================================================================================
Ключевые разделы:

1) ШАБЛОНЫ ПРОЕКТИРОВАНИЯ GRASP
2) ПРИНЦИПЫ SOLID
3) ДОПОЛНИТЕЛЬНЫЕ МАТЕРИАЛЫ

======================================================================================================
1) ШАБЛОНЫ ПРОЕКТИРОВАНИЯ GRASP

GRASP (General Responsibility Assignment Software Patterns) – это набор принципов и паттернов проекти-
рования, помогающих определить, какие классы и объекты должны отвечать за определенные функции в системе,
а также как они должны общаться между собой.

Основная идея GRASP состоит в том, чтобы назначить обязанности объектам так, чтобы они были наиболее неза-
висимыми, повторяющимися и масштабируемыми.

                                           ------------------
                                           Преимущества GRASP:
                                           ------------------

1. Простота и понятность: GRASP предлагает простые и понятные принципы, которые могут быть легко понимаемы
                          и использованы разработчиками.

2. Хорошие практики: GRASP включает в себя некоторые из лучших практик и рекомендаций по проектированию
                     программного обеспечения, что помогает создавать хорошо структурированные и поддержи-
                     ваемые системы.

3. Адаптивность: Принципы GRASP могут применяться на разных этапах проектирования, начиная с анализа требований
                 и заканчивая реализацией и тестированием.

4. Способствование нискому связыванию и высокой когерентности: GRASP способствует созданию систем с низким
                                                               сцеплением и высокой когерентностью, что делает
                                                               их более гибкими и легко изменяемыми.
                                              ----------------
                                              Недостатки GRASP:
                                              ----------------

1. Неуниверсальность: GRASP не является универсальным решением для всех проблем проектирования. Некоторые
                      ситуации могут потребовать дополнительных подходов и инструментов.

2. Субъективность: Некоторые принципы GRASP могут быть субъективными и зависят от интерпретации разработчика.

3. Несоответствие некоторым ситуациям: В некоторых случаях некоторые принципы GRASP могут быть нецелевыми или
                                       непригодными для конкретных задач или архитектур.

4. Требуется опыт: Использование GRASP требует понимания и опыта в проектировании программного обеспечения,
                   поскольку неправильное применение может привести к ухудшению качества кода и архитектуры.

Все эти моменты важно учитывать при использовании GRASP в проекте!

                                            -----------------------
                                            ОСНОВНЫЕ ПРИНЦИПЫ GRASP:
                                            -----------------------
1. Еxpert (Эксперт)
2. Creator (Создатель)
3. Controller (Контроллер)
4. Low Coupling (Слабое связывание)
5. High Cohesion (Высокая когерентность)
6. Polymorphism (Полиморфизм)
7. Pure Fabrication (Чистая выдумка)
8. Indirection (Перенаправление)
9. Protected Variations (Защищенные изменения)

1.Expert (Эксперт): Назначьте обязанность тому классу, который имеет наибольшее количество информации,
                    необходимое для выполнения этой обязанности.

Принцип Expert (Эксперт) GRASP используется тогда, когда нужно определить, какой класс должен иметь доступ
к определенной информации или функциональности. Этот принцип помогает обеспечить эффективную организацию кода
и уменьшить зависимость между классами.

EXPERT - ПРИМЕР: grasp_examples/Grasp_Expert_Principle.java

В этом примере класс StudentService использует метод printStudentInfo, требующий информацию о студенте для
печати его данных. Поскольку класс Student располагает всей необходимой информацией о студенте, он является
экспертом в этом случае. Класс StudentService использует данные с объекта студента напрямую, соблюдая
принцип Expert.

2.Creator (Творец): Возлагайте ответственность за создание объектов на тот класс, который имеет больше
                    информации о том, какой объект необходимо создать и какие параметры использовать.

Принцип Creator GRASP используется тогда, когда нужно решить, какой класс должен создавать экземпляры других
классов. Этот принцип помогает обеспечить надлежащий уровень связи между классами и улучшить расширяемость
программы.

СREATOR - ПРИМЕР: grasp_examples/Grasp_Creator_Principle.java

В этом примере класс ProductFactory является создателем экземпляров класса Product.
Он имеет метод createProduct, создающий новый экземпляр товара с заданными параметрами.
Использование такой фабрики позволяет изолировать процесс создания объектов клиентского кода
и облегчает расширение системы.

3.Controller (Контроллер): Возлагайте ответственность за управление взаимодействием между пользователем и
                           системой на классы, имеющие наибольшее количество информации о потоке управления.

Принцип Controller (Контроллер) GRASP используется тогда, когда требуется определить, какой класс должен
обрабатывать входящие события в системе, поступающие от пользователя или внешних источников. Контроллеры
отвечают за обработку запросов и передачу соответствующих данных к моделям или видам.

CONTROLLER - ПРИМЕР: grasp_examples/Grasp_Controller_Principle.java

В данном примере класс UserController является контроллером, обрабатывающим пользовательские запросы. Он
имеет метод createUser, который принимает имя пользователя и создает новый пользовательский объект с помощью
этого имени. Контроллер помогает разделить логику создания пользователя от логики, связанной с вводом данных.

4.Low Coupling (Низкое сцепление): Уменьшайте зависимость между классами, максимально разделяя их функциональность.

Принцип Low Coupling (Низкое сцепление) GRASP указывает на то, что классы и объекты программы должны быть
слабо зависимы друг от друга. Это означает, что изменения в одном классе не должны приводить к необходимости
внесения изменений во многие другие классы.

Low Coupling - ПРИМЕР: grasp_examples/Grasp_LowCoupling_Principle.java

В этом примере класс MessageService использует интерфейс MessageCreator для создания сообщения. Класс
MessageService не зависит напрямую от конкретных реализаций MessageCreator, что позволяет легко добавлять
новые типы сообщений без изменений в MessageService.

5.High Cohesion (Высокая когерентность): Концентрируйте связанные функции и данные в одном классе.

Принцип High Cohesion (Высокая когерентность) GRASP указывает, что класс или модуль программы должен выполнять
одну конкретную функцию или отвечать за один конкретный аспект программы. Это означает, что все методы класса
должны быть направлены на выполнение этой конкретной функции или взаимосвязаны.

High Cohesion - ПРИМЕР: grasp_examples/Grasp_HighCohesion_Principle.java

В этом примере класс PersonalDataManager отвечает за управление персональными данными пользователей и имеет
высокую когерентность, поскольку все его методы связаны с операциями добавления, удаления и получения
пользователей. Класс выполняет конкретную функцию – управление персональными данными – и все его методы
направлены на эту цель.

6.Polymorphism (Полиморфизм): Используйте полиморфизм для реализации разнообразия объектов и отношений
                              между ними.

Принцип полиморфизма используется в ООП для создания объектов, которые могут иметь разные формы и вести
себя по-разному в зависимости от контекста использования. Это означает, что объекты одного класса могут
использоваться вместо объектов другого класса, если они принадлежат к общему родительскому классу или
интерфейсу.

Polymorphism - ПРИМЕР: grasp_examples/Grasp_Polymoprhism_Principle.java

В этом примере класс Shape является родительским классом для разных геометрических фигур. Классы Circle и
Rectangle являются подклассами Shape и реализуют метод calculateArea() по разному для вычисления площади
круга и прямоугольника соответственно. При вызове метода calculateArea() в родительском классе Shape,
выполняется метод подкласса, позволяющий использовать полиморфизм.

Хотя мы используем один метод calculateArea() из родительского класса Shape, фактически выполняются методы
из подклассов Circle и Rectangle, обеспечивая разные результаты в зависимости от типа фигуры.

7.Pure Fabrication (Чистая выдумка): Создайте классы, не являющиеся частью доменной модели, но
                                     необходимые для улучшения модульности и удобства использования системы.

Принцип "Чистая выдумка" (Pure Fabrication) используется для создания искусственных классов или компонентов,
не отражающих никакой реальной сущности, но обеспечивающих выполнение определенных задач или функциональностей.
Такие классы могут быть полезны для разделения ответственности и облегчения реализации других классов.

Например, можно создать классы или компоненты, отвечающие за взаимодействие с базой данных, сетевыми запросами
или внешними сервисами, не привязываясь к конкретным классам данных или другим сложным компонентам системы.

Pure Fabrication - ПРИМЕР: grasp_examples/Grasp_PureFabrication_Principle.java

В этом примере класс DataProcessor представляет собой чистую выдумку, которая не имеет прямого отображения
на реальный объект, но обеспечивает функциональность обработки и хранения данных в базе данных. Это позволяет
отделить логику обработки данных от логики доступа к базе данных и упрощает тестирование и развитие программы.

8.Indirection (Перенаправление): Используйте промежуточные объекты или слои для уменьшения прямых связей
                                 между классами.

Принцип перенаправления (Indirection) используется для уменьшения зависимостей между классами, ввода
дополнительного слоя абстракции для упрощения изменений и поддержания расширяемости программы. Этот принцип
может быть полезен, когда необходимо уменьшить прямые зависимости между классами и ввод интерфейса или прокси-
объекта для взаимодействия с другими классами.

Например, ввод интерфейса или прокси-объекта позволяет изменять реализацию взаимодействия между классами без
необходимости изменения кода в классах-клиентах.

Indirection - ПРИМЕР: grasp_examples/Grasp_Indirection_Principle.java

В этом примере класс Client использует сервис через интерфейс Service, позволяющий отделить класс-клиент от
конкретной реализации сервиса ConcreteService. Это делает код более гибким и упрощает изменение реализации
сервиса без внесения изменений в класс-клиент.

9.Protected Variations (Защита изменений): Разделяйте систему на компоненты таким образом, чтобы изменения
                                           в одной части системы не влияли на другие части.

Принцип "Защита изменений" (Protected Variations) используется для уменьшения влияния изменений во внешних
компонентах на внутреннюю структуру системы. Этот принцип предполагает создание интерфейса или абстракции,
защищающей внутренний код от изменений во внешних факторах.

Например, если у вас есть система, взаимодействующая с различными источниками данных (например,
базами данных, API), вы можете использовать принцип "Защита изменений", чтобы создать абстракцию, защищающую
внутренний код от изменений в этих источниках данных.

Принцип "Защита перемен" можно применять в следующих ситуациях:

- Когда требуется защитить внутренний код от изменений внешних компонентов или интерфейсов.
- Когда есть риск возникновения зависимостей между разными компонентами системы.

Protected Variations - ПРИМЕР: grasp_examples/Grasp_ProtectedVariations_Principle.java

В этом примере мы создаем абстракцию DataSource, защищающую класс DataService от изменений в реализации
источников данных. Класс DataService работает с абстракцией DataSource, а не с конкретными реализациями.
Когда мы изменяем источник данных из базы данных на внешний API, класс DataService остается неизменным.

Эти принципы помогают определить правильность распределения обязанностей в системе и обеспечивают легкость
поддержки и расширения кода.

*
======================================================================================================
2) ПРИНЦИПЫ SOLID

Принципы SOLID – это набор основных принципов объектно-ориентированного программирования, которые
                 направлены на создание гибких, поддерживаемых и расширяемых программных систем.

------------
Плюсы SOLID:
------------

1. Гибкость и расширяемость кода:
    С помощью SOLID код становится более гибким и расширяется легче.
    Это позволяет изменять функционал программы без необходимости изменять существующий код.

2. Улучшенная читабельность:
    Принципы SOLID помогают улучшить чтение кода, поскольку они способствуют выделению функциональности
    и уменьшению сложности.

3. Повышение устойчивости к изменениям:
    SOLID позволяет создавать приложения, которые легче поддерживать и изменять. Это уменьшает риск
    возникновения ошибок при внесении изменений в код.

4. Содействие повторному использованию кода:
    Четкое определение интерфейсов и разбиение кода на компоненты помогает облегчить повторное
    использование кода в других частях программы или других проектах.

5. Улучшение тестируемости:
    Хорошо структурированный код, соответствующий принципам SOLID, легче тестировать, поскольку отдельные
    части программы можно тестировать независимо друг от друга.

-------------
Минусы SOLID:
-------------

1. Увеличение сложности кода:
    Соблюдение принципов SOLID может привести к увеличению количества классов и интерфейсов, что
    увеличивает сложность кода и усложняет понимание.

2. Чрезмерная абстракция:
    Чрезмерное использование абстракций может привести к излишней сложности и росту времени разработки.

3. Потребность в дополнительном обучении:
    Внедрение принципов SOLID может потребовать дополнительного обучения для разработчиков, не
    знакомых с этими концепциями.

4. Не всегда подходит для маленьких проектов:
    В небольших проектах соблюдение всех принципов SOLID может оказаться лишним и тратить дополнительное
     время, не оправдывая себя.

                            ---------------------------------------------------------
                            Каждая буква в слове SOLID представляет отдельный принцип:
                            ---------------------------------------------------------
* Single Responsibility Principle - SRP (Единичная ответственность);
** Open/Close Pronciple - OCP (Открытость/Закрытость);
*** Liskov Substitution Principle - LSP (Подстановка Лисков);
**** Interface Segregation Principle - ISP (Сегрегация Интерфейсов);
***** Dependency Inversion Principle - DIP (Инверсия зависимостей);

=============================================================================
1. Принцип единичной ответственности (Single Responsibility Principle – SRP):
=============================================================================

    Класс должен иметь только одну причину изменения. Это означает, что каждый класс должен отвечать за одну
    часть функциональности программы.
    Принцип единичной ответственности (SRP) утверждает, что класс должен иметь только одну причину изменения.
    Это означает, что каждый класс или модуль программы должен быть ответственен только за одну конкретную
    функциональность или поведение.

Когда следует использовать SRP:
- При проектировании классов: При проектировании классов следует разделять их функциональность таким образом,
                              чтобы каждый класс отвечал только за одну конкретную роль.
- При обнаружении перегруженного класса: Если класс имеет чрезмерное количество методов или отвечает за слишком
                                         много функциональностей, это может свидетельствовать о нарушении SRP.
- При необходимости изменения функциональности: Если изменение функциональности ведет к необходимости изменения
                                                многих разных классов, это может быть признаком нарушения
                                                принципа SRP.
- При рефакторинге кода: Во время рефакторинга следует проверить, отвечает ли каждый класс за одну причину для
                         изменения и можно ли разделить его функциональность на меньшие, более специализирован-
                         ные классы.

Single Responsibility Principle (SRP) - ПРИМЕР: ../solid_examples/SingleResponsibilityPrinciple_Solid.java

В этом примере класс UserDataStorageAndDisplay нарушает принцип SRP, поскольку он отвечает как за сохранность
объектов, так и за их отображение. После перепроектирования класс был разделен на два отдельных класса:
UserDataStorage, отвечающий за сохранность пользователей, и UserDisplay, отвечающий за их отображение.

==============================================================
2.Принцип открытости/закрытости (Open/Closed Principle - OCP):
==============================================================

Система должна быть открыта для расширения, но закрыта для модификации. Это означает, что классы должны быть
легко расширяемыми новым функционалом без изменения уже существующего кода.

Принцип открытости/закрытости (OCP) утверждает, что программные сущности, такие как классы, модули, функции
и другие, должны быть открыты для расширения, но закрыты для изменений.

Когда следует использовать OCP:

- При проектировании классов: При создании новых классов или модулей важно рассматривать возможность расширения
                              функциональности без изменения исходного кода.
- Использование полиморфизма: Использование полиморфизма позволяет создавать новые классы, которые могут заменять
                              или расширять функциональность существующих классов без их изменения.
- При использовании шаблонов проектирования: Многие шаблоны проектирования, такие как Strategy, Decorator
                                             и Factory, способствуют выполнению принципа OCP, поскольку
                                             позволяют легко расширять функциональность программы.

Open/Close Principle (OCP) - ПРИМЕР: ../solid_examples/OpenClosePrinciple_Solid.java

В этом примере класс AreaCalculator способен вычислять общую площадь для любого типа фигур, вне зависимости
от того, какие новые типы фигур будут добавлены в будущем. Это показывает соответствие принципу
открытости/закрытости.

===================================================================
3. Принцип подстановки Лисков (Liskov Substitution Principle – LSP):
===================================================================

Объекты должны быть заменимы своими суперклассами. Это означает, что классы-наследники должны лучше всего
замещать свои базовые классы без внесения изменений в их работу.

Принцип подстановки Лисков (Liskov Substitution Principle – LSP) утверждает, что объекты подклассов должны
быть заменены объектами базового класса без изменения ожидаемого поведения программы.

Когда следует использовать LSP:

- При наследовании классов: При создании классов-наследников важно убедиться, что они могут быть использованы
                            в любом месте, где используется их базовый класс.

- При работе с интерфейсами: При использовании интерфейсов или абстрактных классов важно, чтобы классы
                             -реализаторы смогли заменить базовый класс без нарушения ожидаемого поведения.

- При применении полиморфизма: Использование полиморфизма при вызове методов базового класса с помощью ссылок
                               на его подклассы требует соответствия принципу LSP.

Liskov Substitution Principle – LSP - ПРИМЕР:   ../solid_examples/LiskovSubstitutionPrinciple_Solid.java

В этом примере классы Rectangle и Square наследуются от базового класса Shape и переопределяют метод
calculateArea(). Классы-наследники могут быть беспроблемно использованы там, где ожидается объект класса
Shape, демонстрирующий соответствие принципа подстановки Лисков.

============================================================================
4.Принцип разделения интерфейса(ов) (Interface Segregation Principle - ISP):
============================================================================

Клиенты не должны зависеть от интерфейсов, которые они не используют. Это означает, что интерфейсы должны
быть содержательно связаны и минимализироваться относительно функциональности.

Принцип разделения интерфейса (Interface Segregation Principle – ISP) утверждает, что клиенты не должны
зависеть от интерфейсов, которые они не используют. Этот принцип рекомендует разделить большие интерфейсы
на меньшие и специфические, чтобы клиенты зависели только от частей интерфейса, которые им нужны.

Когда следует использовать ISP:

- При создании интерфейсов: Разделение интерфейсов на более простые и понятные участки помогает избежать
                            лишних зависимостей клиентов от ненужных методов.

- При реализации многофункциональных классов: Если класс выполняет много различных функций, его интерфейс
                                              может быть разделен на несколько меньших интерфейсов, каждый
                                              из которых соответствует конкретной функциональности.

- При работе с библиотеками и фреймворками: Использование только тех методов интерфейса, которые требуются
                                            для выполнения определенной задачи, позволяет избежать чрезмерных
                                            зависимостей и упростить работу с библиотеками.

Interface Segregation Principle - ISP - ПРИМЕР: ../solid_examples/InterfaceSegregationPrinciple_Solid.java

В этом примере интерфейс MultimediaPlayer был разделен на два отдельных интерфейса – VideoPlayer
и AudioPlayer, чтобы класс SimpleMultimediaPlayer мог имплементировать только те методы, которые
отвечают за воспроизведение аудио. Таким образом, другие классы, которые используют AudioPlayer,
не зависят от ненужных методов воспроизведения видео.

========================================================================
5. Принцип инверсии зависимостей (Dependency Inversion Principle – DIP):
========================================================================

Классы должны зависеть от абстракций, а не от конкретностей. Это означает, что классы верхнего уровня не
должны зависеть от классов нижнего уровня, а оба типа классов должны зависеть от абстракций.

Принцип инверсии зависимостей (Dependency Inversion Principle – DIP) утверждает, что модули высокого уровня
не должны зависеть от модулей низкого уровня, оба типа модулей должны зависеть от абстракций, а не от деталей
реализации. Это означает, что классы верхнего уровня не должны зависеть от классов нижнего уровня, а оба типа
классов должны зависеть от абстракций.

Когда следует использовать DIP:

- При проектировании систем с большим количеством зависимостей: Использование DIP помогает избежать межзависи-
                                                                мостей между классами, что упрощает расширение
                                                                и модификацию программы.

- Использование интерфейсов и абстракций: Интерфейсы и абстрактные классы позволяют решать проблему зависимостей,
                                          поскольку классы верхнего уровня могут опираться на абстракции, а не
                                          на конкретные реализации.

- При разработке тестовых случаев: Применение DIP облегчает написание тестов, поскольку позволяет легко заменять
                                   конкретные реализации вместо использования моков или стабов.

Dependency Inversion Principle – DIP - ПРИМЕР: ../solid_examples/DependencyInversionPrinciple_Solid.java

В этом примере класс Notification зависит от абстракции MessageService, представляющей сервис отправки
сообщений. Класс Notification не зависит от конкретных реализаций этого сервиса, что позволяет легко изменять
реализацию в будущем без изменения класса Notification.

Эти принципы помогают создавать гибкие, масштабируемые и поддерживаемые программные системы, легко изменяющиеся
и расширяющиеся со временем.

*
======================================================================================================
3) ДОПОЛНИТЕЛЬНЫЕ МАТЕРИАЛЫ

GRASP Principles: Object-Oriented Design Patterns
https://patrickkarsh.medium.com/object-oriented-design-with-grasp-principles-8049fa63e52

Grasp Patterns
https://www.theottoolbox.com/grasp-patterns/

SOLID Principles : The Definitive Guide
https://medium.com/android-news/solid-principles-the-definitive-guide-75e30a284dea

A Solid Guide to SOLID Principles
https://www.baeldung.com/solid-principles

Принципи SOLID в об’єктно-орієнтованому програмуванні
https://highload.today/uk/solid/
*
======================================================================================================